
ProiectSDTR2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc8  08007cc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd0  08007cd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b80  20000074  08007d4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  08007d4c  00024bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb20  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003423  00000000  00000000  0003bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0003efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  00040668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e05  00000000  00000000  00041bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fff  00000000  00000000  000459dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a76a  00000000  00000000  0005e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006684  00000000  00000000  000f9198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b70 	.word	0x08007b70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007b70 	.word	0x08007b70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000d74:	f000 fc76 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f842 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 f952 	bl	8001024 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d80:	f000 f926 	bl	8000fd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d84:	f000 f8a6 	bl	8000ed4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d88:	f000 f8d2 	bl	8000f30 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 8000d8c:	4813      	ldr	r0, [pc, #76]	; (8000ddc <main+0x6c>)
 8000d8e:	f001 fda1 	bl	80028d4 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d92:	f002 fdf5 	bl	8003980 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  distanceSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f002 fee7 	bl	8003b6e <osSemaphoreNew>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <main+0x70>)
 8000da4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  distanceQueueHandle = osMessageQueueNew(1, sizeof(uint32_t), NULL);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2104      	movs	r1, #4
 8000daa:	2001      	movs	r0, #1
 8000dac:	f002 fffe 	bl	8003dac <osMessageQueueNew>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <main+0x74>)
 8000db4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <main+0x78>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <main+0x7c>)
 8000dbc:	f002 fe2a 	bl	8003a14 <osThreadNew>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <main+0x80>)
 8000dc4:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <main+0x84>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <main+0x88>)
 8000dcc:	f002 fe22 	bl	8003a14 <osThreadNew>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <main+0x8c>)
 8000dd4:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */

  osKernelStart();
 8000dd6:	f002 fdf7 	bl	80039c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <main+0x6a>
 8000ddc:	200000e4 	.word	0x200000e4
 8000de0:	20000178 	.word	0x20000178
 8000de4:	2000017c 	.word	0x2000017c
 8000de8:	08007bd4 	.word	0x08007bd4
 8000dec:	080010e1 	.word	0x080010e1
 8000df0:	20000170 	.word	0x20000170
 8000df4:	08007bf8 	.word	0x08007bf8
 8000df8:	080011e5 	.word	0x080011e5
 8000dfc:	20000174 	.word	0x20000174

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	; 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f006 f9de 	bl	80071d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a27      	ldr	r2, [pc, #156]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e74:	2308      	movs	r3, #8
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e78:	23c0      	movs	r3, #192	; 0xc0
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e80:	2304      	movs	r3, #4
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f809 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e94:	f000 f9f4 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fa6b 	bl	8002390 <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ec0:	f000 f9de 	bl	8001280 <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3750      	adds	r7, #80	; 0x50
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f000 fe81 	bl	8001c18 <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 f9b0 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000090 	.word	0x20000090
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	00061a80 	.word	0x00061a80

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <MX_TIM1_Init+0x9c>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f54:	2247      	movs	r2, #71	; 0x47
 8000f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f78:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f7a:	f001 fc5b 	bl	8002834 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f84:	f000 f97c 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000f96:	f001 fe61 	bl	8002c5c <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fa0:	f000 f96e 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM1_Init+0x98>)
 8000fb2:	f002 f85d 	bl	8003070 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fbc:	f000 f960 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000e4 	.word	0x200000e4
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <MX_USART2_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_USART2_UART_Init+0x4c>)
 8001008:	f002 f8b4 	bl	8003174 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f000 f935 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000012c 	.word	0x2000012c
 8001020:	40004400 	.word	0x40004400

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <MX_GPIO_Init+0xb0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <MX_GPIO_Init+0xb0>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_GPIO_Init+0xb0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_GPIO_Init+0xb0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <MX_GPIO_Init+0xb0>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_GPIO_Init+0xb0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_GPIO_Init+0xb0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <MX_GPIO_Init+0xb0>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_GPIO_Init+0xb0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <MX_GPIO_Init+0xb4>)
 8001094:	f000 fda6 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001098:	2310      	movs	r3, #16
 800109a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	480a      	ldr	r0, [pc, #40]	; (80010d8 <MX_GPIO_Init+0xb4>)
 80010b0:	f000 fbfc 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_GPIO_Init+0xb4>)
 80010c8:	f000 fbf0 	bl	80018ac <HAL_GPIO_Init>

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	00000000 	.word	0x00000000

080010e0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint32_t timer;
	uint32_t distanceTimer = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  for (;;)
  {
	   //Trimite un puls pe pinul de Trigger: PA4
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2110      	movs	r1, #16
 80010f0:	4837      	ldr	r0, [pc, #220]	; (80011d0 <StartTask1+0xf0>)
 80010f2:	f000 fd77 	bl	8001be4 <HAL_GPIO_WritePin>
	   osDelay(1); // Wait for 1ms
 80010f6:	2001      	movs	r0, #1
 80010f8:	f002 fd1e 	bl	8003b38 <osDelay>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2110      	movs	r1, #16
 8001100:	4833      	ldr	r0, [pc, #204]	; (80011d0 <StartTask1+0xf0>)
 8001102:	f000 fd6f 	bl	8001be4 <HAL_GPIO_WritePin>

	   // Asteapta ca Echo sa fie activ: PA7
	   timer = HAL_GetTick();
 8001106:	f000 fae3 	bl	80016d0 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]
	   while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET && (HAL_GetTick() - timer) < 10);
 800110c:	bf00      	nop
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	482f      	ldr	r0, [pc, #188]	; (80011d0 <StartTask1+0xf0>)
 8001112:	f000 fd4f 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <StartTask1+0x4a>
 800111c:	f000 fad8 	bl	80016d0 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b09      	cmp	r3, #9
 8001128:	d9f1      	bls.n	800110e <StartTask1+0x2e>

	   // Masoara timpul cat echo este high cu ajutorul TIM1
	   __HAL_TIM_SET_COUNTER(&htim1, 0);
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <StartTask1+0xf4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
	   timer = HAL_GetTick();
 8001132:	f000 facd 	bl	80016d0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]
	   while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && (HAL_GetTick() - timer) < 50);
 8001138:	bf00      	nop
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4824      	ldr	r0, [pc, #144]	; (80011d0 <StartTask1+0xf0>)
 800113e:	f000 fd39 	bl	8001bb4 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <StartTask1+0x76>
 8001148:	f000 fac2 	bl	80016d0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b31      	cmp	r3, #49	; 0x31
 8001154:	d9f1      	bls.n	800113a <StartTask1+0x5a>
	   distanceTimer = __HAL_TIM_GET_COUNTER(&htim1);
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <StartTask1+0xf4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	617b      	str	r3, [r7, #20]
	   timer = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	   // calcularea distantei folosind urmatoarea formula: timpul cat semnalul de echo este high inmultit cu jumatate din viteza sunetului
	   calculatedDistance = (distanceTimer * 0.034) / 2;
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff f9d6 	bl	8000514 <__aeabi_ui2d>
 8001168:	a317      	add	r3, pc, #92	; (adr r3, 80011c8 <StartTask1+0xe8>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa4b 	bl	8000608 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001182:	f7ff fb6b 	bl	800085c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fc4d 	bl	8000a2c <__aeabi_d2uiz>
 8001192:	4603      	mov	r3, r0
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <StartTask1+0xf8>)
 8001196:	6013      	str	r3, [r2, #0]

	   //Trimite distanta masurata catre task-ul 2 cu ajutorul unei cozi
	   uint32_t tempDistance = calculatedDistance;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <StartTask1+0xf8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
	   osMessageQueuePut(distanceQueueHandle, &tempDistance, 0, 0);
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <StartTask1+0xfc>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	f107 010c 	add.w	r1, r7, #12
 80011a6:	2300      	movs	r3, #0
 80011a8:	2200      	movs	r2, #0
 80011aa:	f002 fe73 	bl	8003e94 <osMessageQueuePut>
	   osSemaphoreRelease(distanceSemaphoreHandle);
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <StartTask1+0x100>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fdb6 	bl	8003d24 <osSemaphoreRelease>

	   osDelay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011bc:	f002 fcbc 	bl	8003b38 <osDelay>
  {
 80011c0:	e794      	b.n	80010ec <StartTask1+0xc>
 80011c2:	bf00      	nop
 80011c4:	f3af 8000 	nop.w
 80011c8:	b020c49c 	.word	0xb020c49c
 80011cc:	3fa16872 	.word	0x3fa16872
 80011d0:	40020000 	.word	0x40020000
 80011d4:	200000e4 	.word	0x200000e4
 80011d8:	20000180 	.word	0x20000180
 80011dc:	2000017c 	.word	0x2000017c
 80011e0:	20000178 	.word	0x20000178

080011e4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b090      	sub	sp, #64	; 0x40
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	char uartData[50];

	for(;;)
	{
	  //  Asteapta taskul anterior sa fie gata si elibereaza semaforul
	  osSemaphoreAcquire(distanceSemaphoreHandle, osWaitForever);
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <StartTask2+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fd43 	bl	8003c80 <osSemaphoreAcquire>

	  // Primeste disntanta de la coada
	  if (osMessageQueueGet(distanceQueueHandle, &receivedDistance, NULL, osWaitForever) == osOK)
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <StartTask2+0x6c>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2200      	movs	r2, #0
 8001208:	f002 fea4 	bl	8003f54 <osMessageQueueGet>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d114      	bne.n	800123c <StartTask2+0x58>
	  {
	    //Scrie informatia de transmis in uartData si transmite prin UART: UART2 cu pinii PA2 si PA3
	    sprintf(uartData, "Distanta calculata este: %lu cm\r\n", receivedDistance);
 8001212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <StartTask2+0x70>)
 800121a:	4618      	mov	r0, r3
 800121c:	f006 f8ee 	bl	80073fc <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)uartData, strlen(uartData), 100);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4618      	mov	r0, r3
 8001226:	f7fe ffdb 	bl	80001e0 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	f107 0108 	add.w	r1, r7, #8
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <StartTask2+0x74>)
 8001236:	f001 ffea 	bl	800320e <HAL_UART_Transmit>
 800123a:	e001      	b.n	8001240 <StartTask2+0x5c>
	  }
	  else
	  {
	    // Handle error when receiving data from the queue
	    Error_Handler();
 800123c:	f000 f820 	bl	8001280 <Error_Handler>
	  }

	  osDelay(1500); // Adjust as needed
 8001240:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001244:	f002 fc78 	bl	8003b38 <osDelay>
	  osSemaphoreAcquire(distanceSemaphoreHandle, osWaitForever);
 8001248:	e7d0      	b.n	80011ec <StartTask2+0x8>
 800124a:	bf00      	nop
 800124c:	20000178 	.word	0x20000178
 8001250:	2000017c 	.word	0x2000017c
 8001254:	08007b98 	.word	0x08007b98
 8001258:	2000012c 	.word	0x2000012c

0800125c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800126e:	f000 fa1b 	bl	80016a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40000c00 	.word	0x40000c00

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x54>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <HAL_MspInit+0x54>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x54>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_MspInit+0x54>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_MspInit+0x54>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_MspInit+0x54>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	f06f 0001 	mvn.w	r0, #1
 80012d2:	f000 fac1 	bl	8001858 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_I2C_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12b      	bne.n	800135e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_I2C_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001326:	2312      	movs	r3, #18
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001332:	2304      	movs	r3, #4
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <HAL_I2C_MspInit+0x8c>)
 800133e:	f000 fab5 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_I2C_MspInit+0x88>)
 800134c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_I2C_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40005400 	.word	0x40005400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400

08001374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10d      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_TIM_Base_MspInit+0x40>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_TIM_Base_MspInit+0x40>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_TIM_Base_MspInit+0x40>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_UART_MspInit+0x84>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12b      	bne.n	8001432 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_UART_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_UART_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001412:	230c      	movs	r3, #12
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001422:	2307      	movs	r3, #7
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_UART_MspInit+0x8c>)
 800142e:	f000 fa3d 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004400 	.word	0x40004400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_InitTick+0xe4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_InitTick+0xe4>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_InitTick+0xe4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001474:	f107 0210 	add.w	r2, r7, #16
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f9a6 	bl	80027d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800148e:	f001 f977 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8001492:	6378      	str	r0, [r7, #52]	; 0x34
 8001494:	e004      	b.n	80014a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001496:	f001 f973 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 800149a:	4603      	mov	r3, r0
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <HAL_InitTick+0xe8>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	3b01      	subs	r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_InitTick+0xec>)
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_InitTick+0xf0>)
 80014b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <HAL_InitTick+0xec>)
 80014b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ba:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <HAL_InitTick+0xec>)
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_InitTick+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_InitTick+0xec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_InitTick+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80014d4:	4817      	ldr	r0, [pc, #92]	; (8001534 <HAL_InitTick+0xec>)
 80014d6:	f001 f9ad 	bl	8002834 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80014e8:	4812      	ldr	r0, [pc, #72]	; (8001534 <HAL_InitTick+0xec>)
 80014ea:	f001 fa4d 	bl	8002988 <HAL_TIM_Base_Start_IT>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d111      	bne.n	8001520 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014fc:	2032      	movs	r0, #50	; 0x32
 80014fe:	f000 f9c7 	bl	8001890 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d808      	bhi.n	800151a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f000 f9a3 	bl	8001858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_InitTick+0xf4>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e002      	b.n	8001520 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001524:	4618      	mov	r0, r3
 8001526:	3738      	adds	r7, #56	; 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	431bde83 	.word	0x431bde83
 8001534:	20000184 	.word	0x20000184
 8001538:	40000c00 	.word	0x40000c00
 800153c:	20000004 	.word	0x20000004

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM5_IRQHandler+0x10>)
 8001572:	f001 fa6b 	bl	8002a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000184 	.word	0x20000184

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f005 fdd4 	bl	800715c <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20018000 	.word	0x20018000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	200001cc 	.word	0x200001cc
 80015e8:	20004bf8 	.word	0x20004bf8

080015ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001616:	490e      	ldr	r1, [pc, #56]	; (8001650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800162c:	4c0b      	ldr	r4, [pc, #44]	; (800165c <LoopFillZerobss+0x26>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163a:	f7ff ffd7 	bl	80015ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f005 fd93 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7ff fb95 	bl	8000d70 <main>
  bx  lr    
 8001646:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001648:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001654:	08007cd8 	.word	0x08007cd8
  ldr r2, =_sbss
 8001658:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800165c:	20004bf4 	.word	0x20004bf4

08001660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_Init+0x40>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_Init+0x40>)
 800167a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_Init+0x40>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800168c:	2003      	movs	r0, #3
 800168e:	f000 f8d8 	bl	8001842 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001692:	200f      	movs	r0, #15
 8001694:	f7ff fed8 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001698:	f7ff fdf8 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	200001d0 	.word	0x200001d0

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	200001d0 	.word	0x200001d0

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4907      	ldr	r1, [pc, #28]	; (8001784 <__NVIC_EnableIRQ+0x38>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ff4c 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186a:	f7ff ff61 	bl	8001730 <__NVIC_GetPriorityGrouping>
 800186e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	6978      	ldr	r0, [r7, #20]
 8001876:	f7ff ffb1 	bl	80017dc <NVIC_EncodePriority>
 800187a:	4602      	mov	r2, r0
 800187c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff80 	bl	8001788 <__NVIC_SetPriority>
}
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff54 	bl	800174c <__NVIC_EnableIRQ>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e159      	b.n	8001b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8148 	bne.w	8001b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a2 	beq.w	8001b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x2e8>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_GPIO_Init+0x2ec>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a49      	ldr	r2, [pc, #292]	; (8001b9c <HAL_GPIO_Init+0x2f0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x202>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a48      	ldr	r2, [pc, #288]	; (8001ba0 <HAL_GPIO_Init+0x2f4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x1fe>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_GPIO_Init+0x2f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fa>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <HAL_GPIO_Init+0x2fc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x1f6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x1f2>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e008      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x204>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f002 0203 	and.w	r2, r2, #3
 8001ab6:	0092      	lsls	r2, r2, #2
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac0:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x2ec>)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b70:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	f67f aea2 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e001      	b.n	8001bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e12b      	b.n	8001e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fb50 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c7c:	f000 fd80 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a81      	ldr	r2, [pc, #516]	; (8001e8c <HAL_I2C_Init+0x274>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d807      	bhi.n	8001c9c <HAL_I2C_Init+0x84>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <HAL_I2C_Init+0x278>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e006      	b.n	8001caa <HAL_I2C_Init+0x92>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a7d      	ldr	r2, [pc, #500]	; (8001e94 <HAL_I2C_Init+0x27c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0e7      	b.n	8001e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a78      	ldr	r2, [pc, #480]	; (8001e98 <HAL_I2C_Init+0x280>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_I2C_Init+0x274>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d802      	bhi.n	8001cec <HAL_I2C_Init+0xd4>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	e009      	b.n	8001d00 <HAL_I2C_Init+0xe8>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4a69      	ldr	r2, [pc, #420]	; (8001e9c <HAL_I2C_Init+0x284>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	495c      	ldr	r1, [pc, #368]	; (8001e8c <HAL_I2C_Init+0x274>)
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d819      	bhi.n	8001d54 <HAL_I2C_Init+0x13c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e59      	subs	r1, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d34:	400b      	ands	r3, r1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <HAL_I2C_Init+0x138>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1e59      	subs	r1, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	e051      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e04f      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_I2C_Init+0x168>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e012      	b.n	8001da6 <HAL_I2C_Init+0x18e>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	0099      	lsls	r1, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x196>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e022      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <HAL_I2C_Init+0x1bc>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e58      	subs	r0, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd2:	e00f      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	0099      	lsls	r1, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	6809      	ldr	r1, [r1, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6911      	ldr	r1, [r2, #16]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	000186a0 	.word	0x000186a0
 8001e90:	001e847f 	.word	0x001e847f
 8001e94:	003d08ff 	.word	0x003d08ff
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	10624dd3 	.word	0x10624dd3

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e267      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e242      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x74>
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6f      	ldr	r2, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6c      	ldr	r2, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fbba 	bl	80016d0 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fbb6 	bl	80016d0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e207      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fba6 	bl	80016d0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fba2 	bl	80016d0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1f3      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0xe8>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1c7      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff fb5b 	bl	80016d0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff fb57 	bl	80016d0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1a8      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4925      	ldr	r1, [pc, #148]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fb3a 	bl	80016d0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fb36 	bl	80016d0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e187      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d036      	beq.n	80020f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCC_OscConfig+0x248>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff fb1a 	bl	80016d0 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff fb16 	bl	80016d0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e167      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
 80020be:	e01b      	b.n	80020f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_OscConfig+0x248>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fb03 	bl	80016d0 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	e00e      	b.n	80020ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff faff 	bl	80016d0 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d907      	bls.n	80020ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e150      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000
 80020e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ea      	bne.n	80020ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8097 	beq.w	8002234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b7d      	ldr	r3, [pc, #500]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a7c      	ldr	r2, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b77      	ldr	r3, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b74      	ldr	r3, [pc, #464]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a73      	ldr	r2, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff fabf 	bl	80016d0 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff fabb 	bl	80016d0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e10c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x474>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x2ea>
 800217c:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a63      	ldr	r2, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x30c>
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a5b      	ldr	r2, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 80021ac:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a54      	ldr	r2, [pc, #336]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff fa80 	bl	80016d0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7ff fa7c 	bl	80016d0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0cb      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff fa6a 	bl	80016d0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7ff fa66 	bl	80016d0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0b5      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a38      	ldr	r2, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a1 	beq.w	8002380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d05c      	beq.n	8002304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d141      	bne.n	80022d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fa3a 	bl	80016d0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7ff fa36 	bl	80016d0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e087      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff fa0f 	bl	80016d0 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b6:	f7ff fa0b 	bl	80016d0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e05c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x416>
 80022d4:	e054      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_OscConfig+0x478>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f9f8 	bl	80016d0 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7ff f9f4 	bl	80016d0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e045      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x470>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
 8002302:	e03d      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e038      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
 8002318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x4ec>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d028      	beq.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7ff f926 	bl	80016d0 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff f922 	bl	80016d0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe ff86 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	08007c1c 	.word	0x08007c1c
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b094      	sub	sp, #80	; 0x50
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
 8002568:	2300      	movs	r3, #0
 800256a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800256c:	2300      	movs	r3, #0
 800256e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80e1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e0db      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002594:	e0db      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_GetSysClockFreq+0x208>)
 8002598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259a:	e0d8      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b6f      	ldr	r3, [pc, #444]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b6d      	ldr	r3, [pc, #436]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80025bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	6139      	str	r1, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002600:	4659      	mov	r1, fp
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4651      	mov	r1, sl
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ebb2 0801 	subs.w	r8, r2, r1
 8002614:	4659      	mov	r1, fp
 8002616:	eb63 0901 	sbc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	462b      	mov	r3, r5
 800263c:	eb49 0303 	adc.w	r3, r9, r3
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264e:	4629      	mov	r1, r5
 8002650:	024b      	lsls	r3, r1, #9
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002658:	4621      	mov	r1, r4
 800265a:	024a      	lsls	r2, r1, #9
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
 8002666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800266c:	f7fe f9fe 	bl	8000a6c <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002678:	e058      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	4618      	mov	r0, r3
 8002684:	4611      	mov	r1, r2
 8002686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026cc:	ebb2 040a 	subs.w	r4, r2, sl
 80026d0:	eb63 050b 	sbc.w	r5, r3, fp
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	00eb      	lsls	r3, r5, #3
 80026de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e2:	00e2      	lsls	r2, r4, #3
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	18e3      	adds	r3, r4, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb45 0303 	adc.w	r3, r5, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	f7fe f9a4 	bl	8000a6c <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800273c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002750:	4618      	mov	r0, r3
 8002752:	3750      	adds	r7, #80	; 0x50
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08007c2c 	.word	0x08007c2c

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08007c2c 	.word	0x08007c2c

080027d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	220f      	movs	r2, #15
 80027de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCC_GetClockConfig+0x60>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e041      	b.n	80028ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fd8a 	bl	8001374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3304      	adds	r3, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f000 fae2 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d001      	beq.n	80028ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e03c      	b.n	8002966 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_TIM_Base_Start+0xa0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d018      	beq.n	8002930 <HAL_TIM_Base_Start+0x5c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d013      	beq.n	8002930 <HAL_TIM_Base_Start+0x5c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <HAL_TIM_Base_Start+0xa4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00e      	beq.n	8002930 <HAL_TIM_Base_Start+0x5c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_TIM_Base_Start+0xa8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_TIM_Base_Start+0x5c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_TIM_Base_Start+0xac>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_TIM_Base_Start+0x5c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_TIM_Base_Start+0xb0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d111      	bne.n	8002954 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b06      	cmp	r3, #6
 8002940:	d010      	beq.n	8002964 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002952:	e007      	b.n	8002964 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	40000c00 	.word	0x40000c00
 8002984:	40014000 	.word	0x40014000

08002988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e044      	b.n	8002a2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <HAL_TIM_Base_Start_IT+0xb0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d018      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d013      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_TIM_Base_Start_IT+0xb4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_TIM_Base_Start_IT+0xb8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_TIM_Base_Start_IT+0xbc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x6c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIM_Base_Start_IT+0xc0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d111      	bne.n	8002a18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d010      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a16:	e007      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40014000 	.word	0x40014000

08002a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d122      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0202 	mvn.w	r2, #2
 8002a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9b5 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9a7 	bl	8002dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f9b8 	bl	8002e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d122      	bne.n	8002afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d11b      	bne.n	8002afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0204 	mvn.w	r2, #4
 8002acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f98b 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002ae8:	e005      	b.n	8002af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f97d 	bl	8002dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f98e 	bl	8002e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d122      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d11b      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0208 	mvn.w	r2, #8
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2204      	movs	r2, #4
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f961 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f953 	bl	8002dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f964 	bl	8002e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0210 	mvn.w	r2, #16
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f937 	bl	8002dfe <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f929 	bl	8002dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f93a 	bl	8002e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d107      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0201 	mvn.w	r2, #1
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe fb46 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fab2 	bl	8003160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8ff 	bl	8002e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0220 	mvn.w	r2, #32
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa7c 	bl	800314c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_TIM_ConfigClockSource+0x1c>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0b4      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x186>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	d03e      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xd4>
 8002cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb6:	f200 8087 	bhi.w	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	f000 8086 	beq.w	8002dce <HAL_TIM_ConfigClockSource+0x172>
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	d87f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d01a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xa6>
 8002ccc:	2b70      	cmp	r3, #112	; 0x70
 8002cce:	d87b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b60      	cmp	r3, #96	; 0x60
 8002cd2:	d050      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x11a>
 8002cd4:	2b60      	cmp	r3, #96	; 0x60
 8002cd6:	d877      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b50      	cmp	r3, #80	; 0x50
 8002cda:	d03c      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xfa>
 8002cdc:	2b50      	cmp	r3, #80	; 0x50
 8002cde:	d873      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d058      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x13a>
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d86f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d064      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d86b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d060      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d867      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d05a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d00:	e062      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f000 f98d 	bl	8003030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e04f      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f000 f976 	bl	8003030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e03c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8ea 	bl	8002f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2150      	movs	r1, #80	; 0x50
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f943 	bl	8002ffa <TIM_ITRx_SetConfig>
      break;
 8002d74:	e02c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f909 	bl	8002f9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2160      	movs	r1, #96	; 0x60
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f933 	bl	8002ffa <TIM_ITRx_SetConfig>
      break;
 8002d94:	e01c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 f8ca 	bl	8002f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f923 	bl	8002ffa <TIM_ITRx_SetConfig>
      break;
 8002db4:	e00c      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 f91a 	bl	8002ffa <TIM_ITRx_SetConfig>
      break;
 8002dc6:	e003      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e000      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <TIM_Base_SetConfig+0xe4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <TIM_Base_SetConfig+0xe8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <TIM_Base_SetConfig+0xec>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a2f      	ldr	r2, [pc, #188]	; (8002f2c <TIM_Base_SetConfig+0xf0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <TIM_Base_SetConfig+0xe4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01b      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d017      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <TIM_Base_SetConfig+0xe8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <TIM_Base_SetConfig+0xec>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00f      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <TIM_Base_SetConfig+0xf0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <TIM_Base_SetConfig+0xf4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <TIM_Base_SetConfig+0xf8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <TIM_Base_SetConfig+0xfc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <TIM_Base_SetConfig+0xe4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800

08002f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0201 	bic.w	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 030a 	bic.w	r3, r3, #10
 8002f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b087      	sub	sp, #28
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0210 	bic.w	r2, r3, #16
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	031b      	lsls	r3, r3, #12
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	f043 0307 	orr.w	r3, r3, #7
 800301c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	431a      	orrs	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003084:	2302      	movs	r3, #2
 8003086:	e050      	b.n	800312a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d018      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d013      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a18      	ldr	r2, [pc, #96]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a16      	ldr	r2, [pc, #88]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10c      	bne.n	8003118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4313      	orrs	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40000400 	.word	0x40000400
 8003140:	40000800 	.word	0x40000800
 8003144:	40000c00 	.word	0x40000c00
 8003148:	40014000 	.word	0x40014000

0800314c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e03f      	b.n	8003206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe f90c 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f929 	bl	8003410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b08a      	sub	sp, #40	; 0x28
 8003212:	af02      	add	r7, sp, #8
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	d17c      	bne.n	8003328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_UART_Transmit+0x2c>
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e075      	b.n	800332a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_UART_Transmit+0x3e>
 8003248:	2302      	movs	r3, #2
 800324a:	e06e      	b.n	800332a <HAL_UART_Transmit+0x11c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2221      	movs	r2, #33	; 0x21
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003262:	f7fe fa35 	bl	80016d0 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d108      	bne.n	8003290 <HAL_UART_Transmit+0x82>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	e003      	b.n	8003298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032a0:	e02a      	b.n	80032f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f840 	bl	8003332 <UART_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e036      	b.n	800332a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3302      	adds	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e007      	b.n	80032ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3301      	adds	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1cf      	bne.n	80032a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f810 	bl	8003332 <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e006      	b.n	800332a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b090      	sub	sp, #64	; 0x40
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003342:	e050      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d04c      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800334c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0x30>
 8003352:	f7fe f9bd 	bl	80016d0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800335e:	429a      	cmp	r2, r3
 8003360:	d241      	bcs.n	80033e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003382:	637a      	str	r2, [r7, #52]	; 0x34
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e5      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	613b      	str	r3, [r7, #16]
   return(result);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b6:	623a      	str	r2, [r7, #32]
 80033b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	69f9      	ldr	r1, [r7, #28]
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e5      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00f      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d09f      	beq.n	8003344 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3740      	adds	r7, #64	; 0x40
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003414:	b0c0      	sub	sp, #256	; 0x100
 8003416:	af00      	add	r7, sp, #0
 8003418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	68d9      	ldr	r1, [r3, #12]
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	ea40 0301 	orr.w	r3, r0, r1
 8003438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003468:	f021 010c 	bic.w	r1, r1, #12
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	6999      	ldr	r1, [r3, #24]
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	ea40 0301 	orr.w	r3, r0, r1
 8003496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b8f      	ldr	r3, [pc, #572]	; (80036dc <UART_SetConfig+0x2cc>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d005      	beq.n	80034b0 <UART_SetConfig+0xa0>
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8d      	ldr	r3, [pc, #564]	; (80036e0 <UART_SetConfig+0x2d0>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d104      	bne.n	80034ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7ff f97a 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80034b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034b8:	e003      	b.n	80034c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ba:	f7ff f961 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80034be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034cc:	f040 810c 	bne.w	80036e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	1891      	adds	r1, r2, r2
 80034e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ea:	415b      	adcs	r3, r3
 80034ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034f2:	4621      	mov	r1, r4
 80034f4:	eb12 0801 	adds.w	r8, r2, r1
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb43 0901 	adc.w	r9, r3, r1
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003512:	4690      	mov	r8, r2
 8003514:	4699      	mov	r9, r3
 8003516:	4623      	mov	r3, r4
 8003518:	eb18 0303 	adds.w	r3, r8, r3
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003520:	462b      	mov	r3, r5
 8003522:	eb49 0303 	adc.w	r3, r9, r3
 8003526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800353a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800353e:	460b      	mov	r3, r1
 8003540:	18db      	adds	r3, r3, r3
 8003542:	653b      	str	r3, [r7, #80]	; 0x50
 8003544:	4613      	mov	r3, r2
 8003546:	eb42 0303 	adc.w	r3, r2, r3
 800354a:	657b      	str	r3, [r7, #84]	; 0x54
 800354c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003554:	f7fd fa8a 	bl	8000a6c <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <UART_SetConfig+0x2d4>)
 800355e:	fba3 2302 	umull	r2, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	011c      	lsls	r4, r3, #4
 8003566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003578:	4642      	mov	r2, r8
 800357a:	464b      	mov	r3, r9
 800357c:	1891      	adds	r1, r2, r2
 800357e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003580:	415b      	adcs	r3, r3
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003588:	4641      	mov	r1, r8
 800358a:	eb12 0a01 	adds.w	sl, r2, r1
 800358e:	4649      	mov	r1, r9
 8003590:	eb43 0b01 	adc.w	fp, r3, r1
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a8:	4692      	mov	sl, r2
 80035aa:	469b      	mov	fp, r3
 80035ac:	4643      	mov	r3, r8
 80035ae:	eb1a 0303 	adds.w	r3, sl, r3
 80035b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb4b 0303 	adc.w	r3, fp, r3
 80035bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	643b      	str	r3, [r7, #64]	; 0x40
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	647b      	str	r3, [r7, #68]	; 0x44
 80035e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035ea:	f7fd fa3f 	bl	8000a6c <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <UART_SetConfig+0x2d4>)
 80035f6:	fba3 2301 	umull	r2, r3, r3, r1
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2264      	movs	r2, #100	; 0x64
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	1acb      	subs	r3, r1, r3
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800360a:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <UART_SetConfig+0x2d4>)
 800360c:	fba3 2302 	umull	r2, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003618:	441c      	add	r4, r3
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	63b9      	str	r1, [r7, #56]	; 0x38
 8003634:	415b      	adcs	r3, r3
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800363c:	4641      	mov	r1, r8
 800363e:	1851      	adds	r1, r2, r1
 8003640:	6339      	str	r1, [r7, #48]	; 0x30
 8003642:	4649      	mov	r1, r9
 8003644:	414b      	adcs	r3, r1
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003654:	4659      	mov	r1, fp
 8003656:	00cb      	lsls	r3, r1, #3
 8003658:	4651      	mov	r1, sl
 800365a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365e:	4651      	mov	r1, sl
 8003660:	00ca      	lsls	r2, r1, #3
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	4603      	mov	r3, r0
 8003668:	4642      	mov	r2, r8
 800366a:	189b      	adds	r3, r3, r2
 800366c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003670:	464b      	mov	r3, r9
 8003672:	460a      	mov	r2, r1
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800368c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003690:	460b      	mov	r3, r1
 8003692:	18db      	adds	r3, r3, r3
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	4613      	mov	r3, r2
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036a6:	f7fd f9e1 	bl	8000a6c <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <UART_SetConfig+0x2d4>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	; 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	3332      	adds	r3, #50	; 0x32
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <UART_SetConfig+0x2d4>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4422      	add	r2, r4
 80036d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d8:	e105      	b.n	80038e6 <UART_SetConfig+0x4d6>
 80036da:	bf00      	nop
 80036dc:	40011000 	.word	0x40011000
 80036e0:	40011400 	.word	0x40011400
 80036e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036fa:	4642      	mov	r2, r8
 80036fc:	464b      	mov	r3, r9
 80036fe:	1891      	adds	r1, r2, r2
 8003700:	6239      	str	r1, [r7, #32]
 8003702:	415b      	adcs	r3, r3
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370a:	4641      	mov	r1, r8
 800370c:	1854      	adds	r4, r2, r1
 800370e:	4649      	mov	r1, r9
 8003710:	eb43 0501 	adc.w	r5, r3, r1
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	00eb      	lsls	r3, r5, #3
 800371e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	4614      	mov	r4, r2
 8003726:	461d      	mov	r5, r3
 8003728:	4643      	mov	r3, r8
 800372a:	18e3      	adds	r3, r4, r3
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003730:	464b      	mov	r3, r9
 8003732:	eb45 0303 	adc.w	r3, r5, r3
 8003736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003756:	4629      	mov	r1, r5
 8003758:	008b      	lsls	r3, r1, #2
 800375a:	4621      	mov	r1, r4
 800375c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003760:	4621      	mov	r1, r4
 8003762:	008a      	lsls	r2, r1, #2
 8003764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003768:	f7fd f980 	bl	8000a6c <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b60      	ldr	r3, [pc, #384]	; (80038f4 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011c      	lsls	r4, r3, #4
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	61b9      	str	r1, [r7, #24]
 8003794:	415b      	adcs	r3, r3
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800379c:	4641      	mov	r1, r8
 800379e:	1851      	adds	r1, r2, r1
 80037a0:	6139      	str	r1, [r7, #16]
 80037a2:	4649      	mov	r1, r9
 80037a4:	414b      	adcs	r3, r1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b4:	4659      	mov	r1, fp
 80037b6:	00cb      	lsls	r3, r1, #3
 80037b8:	4651      	mov	r1, sl
 80037ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037be:	4651      	mov	r1, sl
 80037c0:	00ca      	lsls	r2, r1, #3
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	4642      	mov	r2, r8
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037d0:	464b      	mov	r3, r9
 80037d2:	460a      	mov	r2, r1
 80037d4:	eb42 0303 	adc.w	r3, r2, r3
 80037d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037f4:	4649      	mov	r1, r9
 80037f6:	008b      	lsls	r3, r1, #2
 80037f8:	4641      	mov	r1, r8
 80037fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fe:	4641      	mov	r1, r8
 8003800:	008a      	lsls	r2, r1, #2
 8003802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003806:	f7fd f931 	bl	8000a6c <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <UART_SetConfig+0x4e4>)
 8003810:	fba3 1302 	umull	r1, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	2164      	movs	r1, #100	; 0x64
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	3332      	adds	r3, #50	; 0x32
 8003822:	4a34      	ldr	r2, [pc, #208]	; (80038f4 <UART_SetConfig+0x4e4>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382e:	441c      	add	r4, r3
 8003830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003834:	2200      	movs	r2, #0
 8003836:	673b      	str	r3, [r7, #112]	; 0x70
 8003838:	677a      	str	r2, [r7, #116]	; 0x74
 800383a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800383e:	4642      	mov	r2, r8
 8003840:	464b      	mov	r3, r9
 8003842:	1891      	adds	r1, r2, r2
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	415b      	adcs	r3, r3
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800384e:	4641      	mov	r1, r8
 8003850:	1851      	adds	r1, r2, r1
 8003852:	6039      	str	r1, [r7, #0]
 8003854:	4649      	mov	r1, r9
 8003856:	414b      	adcs	r3, r1
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003866:	4659      	mov	r1, fp
 8003868:	00cb      	lsls	r3, r1, #3
 800386a:	4651      	mov	r1, sl
 800386c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003870:	4651      	mov	r1, sl
 8003872:	00ca      	lsls	r2, r1, #3
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	4603      	mov	r3, r0
 800387a:	4642      	mov	r2, r8
 800387c:	189b      	adds	r3, r3, r2
 800387e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003880:	464b      	mov	r3, r9
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	663b      	str	r3, [r7, #96]	; 0x60
 8003894:	667a      	str	r2, [r7, #100]	; 0x64
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038a2:	4649      	mov	r1, r9
 80038a4:	008b      	lsls	r3, r1, #2
 80038a6:	4641      	mov	r1, r8
 80038a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ac:	4641      	mov	r1, r8
 80038ae:	008a      	lsls	r2, r1, #2
 80038b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038b4:	f7fd f8da 	bl	8000a6c <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <UART_SetConfig+0x4e4>)
 80038be:	fba3 1302 	umull	r1, r3, r3, r2
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2164      	movs	r1, #100	; 0x64
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	3332      	adds	r3, #50	; 0x32
 80038d0:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <UART_SetConfig+0x4e4>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	f003 020f 	and.w	r2, r3, #15
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4422      	add	r2, r4
 80038e4:	609a      	str	r2, [r3, #8]
}
 80038e6:	bf00      	nop
 80038e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038ec:	46bd      	mov	sp, r7
 80038ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f2:	bf00      	nop
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <__NVIC_SetPriority>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Handler+0x1c>)
 8003952:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003954:	f002 fa9a 	bl	8005e8c <xTaskGetSchedulerState>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800395e:	f003 f983 	bl	8006c68 <xPortSysTickHandler>
  }
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003970:	2100      	movs	r1, #0
 8003972:	f06f 0004 	mvn.w	r0, #4
 8003976:	f7ff ffbf 	bl	80038f8 <__NVIC_SetPriority>
#endif
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003986:	f3ef 8305 	mrs	r3, IPSR
 800398a:	603b      	str	r3, [r7, #0]
  return(result);
 800398c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003992:	f06f 0305 	mvn.w	r3, #5
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e00c      	b.n	80039b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <osKernelInitialize+0x44>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <osKernelInitialize+0x44>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e002      	b.n	80039b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	200001d4 	.word	0x200001d4

080039c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ce:	f3ef 8305 	mrs	r3, IPSR
 80039d2:	603b      	str	r3, [r7, #0]
  return(result);
 80039d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80039da:	f06f 0305 	mvn.w	r3, #5
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e010      	b.n	8003a04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039e2:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <osKernelStart+0x48>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d109      	bne.n	80039fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039ea:	f7ff ffbf 	bl	800396c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <osKernelStart+0x48>)
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039f4:	f001 fdee 	bl	80055d4 <vTaskStartScheduler>
      stat = osOK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e002      	b.n	8003a04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a04:	687b      	ldr	r3, [r7, #4]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200001d4 	.word	0x200001d4

08003a14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a24:	f3ef 8305 	mrs	r3, IPSR
 8003a28:	617b      	str	r3, [r7, #20]
  return(result);
 8003a2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d17e      	bne.n	8003b2e <osThreadNew+0x11a>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d07b      	beq.n	8003b2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a3a:	2318      	movs	r3, #24
 8003a3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d045      	beq.n	8003ada <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <osThreadNew+0x48>
        name = attr->name;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <osThreadNew+0x6e>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b38      	cmp	r3, #56	; 0x38
 8003a74:	d805      	bhi.n	8003a82 <osThreadNew+0x6e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <osThreadNew+0x72>
        return (NULL);
 8003a82:	2300      	movs	r3, #0
 8003a84:	e054      	b.n	8003b30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <osThreadNew+0xa8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2bbb      	cmp	r3, #187	; 0xbb
 8003aa4:	d90a      	bls.n	8003abc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <osThreadNew+0xa8>
        mem = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e010      	b.n	8003ade <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10c      	bne.n	8003ade <osThreadNew+0xca>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <osThreadNew+0xca>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <osThreadNew+0xca>
          mem = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e001      	b.n	8003ade <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d110      	bne.n	8003b06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aec:	9202      	str	r2, [sp, #8]
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f001 fb7e 	bl	80051fc <xTaskCreateStatic>
 8003b00:	4603      	mov	r3, r0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e013      	b.n	8003b2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d110      	bne.n	8003b2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	f107 0310 	add.w	r3, r7, #16
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f001 fbc9 	bl	80052b6 <xTaskCreate>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <osThreadNew+0x11a>
            hTask = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b2e:	693b      	ldr	r3, [r7, #16]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b40:	f3ef 8305 	mrs	r3, IPSR
 8003b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <osDelay+0x1c>
    stat = osErrorISR;
 8003b4c:	f06f 0305 	mvn.w	r3, #5
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e007      	b.n	8003b64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f001 fd04 	bl	800556c <vTaskDelay>
    }
  }

  return (stat);
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08a      	sub	sp, #40	; 0x28
 8003b72:	af02      	add	r7, sp, #8
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b7e:	f3ef 8305 	mrs	r3, IPSR
 8003b82:	613b      	str	r3, [r7, #16]
  return(result);
 8003b84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d175      	bne.n	8003c76 <osSemaphoreNew+0x108>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d072      	beq.n	8003c76 <osSemaphoreNew+0x108>
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d86e      	bhi.n	8003c76 <osSemaphoreNew+0x108>
    mem = -1;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <osSemaphoreNew+0x4c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b4f      	cmp	r3, #79	; 0x4f
 8003bb2:	d902      	bls.n	8003bba <osSemaphoreNew+0x4c>
        mem = 1;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e00c      	b.n	8003bd4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d108      	bne.n	8003bd4 <osSemaphoreNew+0x66>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <osSemaphoreNew+0x66>
          mem = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	e001      	b.n	8003bd4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d04c      	beq.n	8003c76 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d128      	bne.n	8003c34 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10a      	bne.n	8003bfe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2203      	movs	r2, #3
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	f000 fb5b 	bl	80042b0 <xQueueGenericCreateStatic>
 8003bfa:	61f8      	str	r0, [r7, #28]
 8003bfc:	e005      	b.n	8003c0a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003bfe:	2203      	movs	r2, #3
 8003c00:	2100      	movs	r1, #0
 8003c02:	2001      	movs	r0, #1
 8003c04:	f000 fbcc 	bl	80043a0 <xQueueGenericCreate>
 8003c08:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <osSemaphoreNew+0xe8>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c16:	2300      	movs	r3, #0
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	69f8      	ldr	r0, [r7, #28]
 8003c1e:	f000 fc87 	bl	8004530 <xQueueGenericSend>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d016      	beq.n	8003c56 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003c28:	69f8      	ldr	r0, [r7, #28]
 8003c2a:	f001 f913 	bl	8004e54 <vQueueDelete>
            hSemaphore = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e010      	b.n	8003c56 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d108      	bne.n	8003c4c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fc09 	bl	800445a <xQueueCreateCountingSemaphoreStatic>
 8003c48:	61f8      	str	r0, [r7, #28]
 8003c4a:	e004      	b.n	8003c56 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fc3a 	bl	80044c8 <xQueueCreateCountingSemaphore>
 8003c54:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <osSemaphoreNew+0xfc>
          name = attr->name;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	e001      	b.n	8003c6e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003c6e:	6979      	ldr	r1, [r7, #20]
 8003c70:	69f8      	ldr	r0, [r7, #28]
 8003c72:	f001 fa3b 	bl	80050ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003c76:	69fb      	ldr	r3, [r7, #28]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003c98:	f06f 0303 	mvn.w	r3, #3
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e039      	b.n	8003d14 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ca0:	f3ef 8305 	mrs	r3, IPSR
 8003ca4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d022      	beq.n	8003cf2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003cb2:	f06f 0303 	mvn.w	r3, #3
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e02c      	b.n	8003d14 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	6938      	ldr	r0, [r7, #16]
 8003cc8:	f001 f844 	bl	8004d54 <xQueueReceiveFromISR>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d003      	beq.n	8003cda <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003cd2:	f06f 0302 	mvn.w	r3, #2
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e01c      	b.n	8003d14 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d019      	beq.n	8003d14 <osSemaphoreAcquire+0x94>
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <osSemaphoreAcquire+0xa0>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	e010      	b.n	8003d14 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	6938      	ldr	r0, [r7, #16]
 8003cf6:	f000 ff21 	bl	8004b3c <xQueueSemaphoreTake>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d009      	beq.n	8003d14 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003d06:	f06f 0301 	mvn.w	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e002      	b.n	8003d14 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003d0e:	f06f 0302 	mvn.w	r3, #2
 8003d12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003d14:	697b      	ldr	r3, [r7, #20]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003d3a:	f06f 0303 	mvn.w	r3, #3
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e02c      	b.n	8003d9c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d42:	f3ef 8305 	mrs	r3, IPSR
 8003d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01a      	beq.n	8003d84 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4619      	mov	r1, r3
 8003d58:	6938      	ldr	r0, [r7, #16]
 8003d5a:	f000 fd82 	bl	8004862 <xQueueGiveFromISR>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d003      	beq.n	8003d6c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003d64:	f06f 0302 	mvn.w	r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e017      	b.n	8003d9c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <osSemaphoreRelease+0x78>
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <osSemaphoreRelease+0x84>)
 8003d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	e00b      	b.n	8003d9c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d84:	2300      	movs	r3, #0
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	6938      	ldr	r0, [r7, #16]
 8003d8c:	f000 fbd0 	bl	8004530 <xQueueGenericSend>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d002      	beq.n	8003d9c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003d96:	f06f 0302 	mvn.w	r3, #2
 8003d9a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003d9c:	697b      	ldr	r3, [r7, #20]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dbc:	f3ef 8305 	mrs	r3, IPSR
 8003dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d15f      	bne.n	8003e88 <osMessageQueueNew+0xdc>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d05c      	beq.n	8003e88 <osMessageQueueNew+0xdc>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d059      	beq.n	8003e88 <osMessageQueueNew+0xdc>
    mem = -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d029      	beq.n	8003e34 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <osMessageQueueNew+0x62>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b4f      	cmp	r3, #79	; 0x4f
 8003dee:	d90e      	bls.n	8003e0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <osMessageQueueNew+0x62>
        mem = 1;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e014      	b.n	8003e38 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d110      	bne.n	8003e38 <osMessageQueueNew+0x8c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <osMessageQueueNew+0x8c>
          mem = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e001      	b.n	8003e38 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10b      	bne.n	8003e56 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2100      	movs	r1, #0
 8003e48:	9100      	str	r1, [sp, #0]
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fa2f 	bl	80042b0 <xQueueGenericCreateStatic>
 8003e52:	61f8      	str	r0, [r7, #28]
 8003e54:	e008      	b.n	8003e68 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fa9d 	bl	80043a0 <xQueueGenericCreate>
 8003e66:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00c      	beq.n	8003e88 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <osMessageQueueNew+0xd0>
        name = attr->name;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e001      	b.n	8003e80 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	69f8      	ldr	r0, [r7, #28]
 8003e84:	f001 f932 	bl	80050ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003e88:	69fb      	ldr	r3, [r7, #28]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eac:	f3ef 8305 	mrs	r3, IPSR
 8003eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8003eb2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d028      	beq.n	8003f0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <osMessageQueuePut+0x36>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <osMessageQueuePut+0x36>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003eca:	f06f 0303 	mvn.w	r3, #3
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	e038      	b.n	8003f44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003ed6:	f107 0210 	add.w	r2, r7, #16
 8003eda:	2300      	movs	r3, #0
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f000 fc24 	bl	800472c <xQueueGenericSendFromISR>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d003      	beq.n	8003ef2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003eea:	f06f 0302 	mvn.w	r3, #2
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e028      	b.n	8003f44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d025      	beq.n	8003f44 <osMessageQueuePut+0xb0>
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <osMessageQueuePut+0xbc>)
 8003efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	e01c      	b.n	8003f44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <osMessageQueuePut+0x82>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003f16:	f06f 0303 	mvn.w	r3, #3
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e012      	b.n	8003f44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f1e:	2300      	movs	r3, #0
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	69b8      	ldr	r0, [r7, #24]
 8003f26:	f000 fb03 	bl	8004530 <xQueueGenericSend>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d009      	beq.n	8003f44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003f36:	f06f 0301 	mvn.w	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	e002      	b.n	8003f44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003f3e:	f06f 0302 	mvn.w	r3, #2
 8003f42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f44:	69fb      	ldr	r3, [r7, #28]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6a:	f3ef 8305 	mrs	r3, IPSR
 8003f6e:	617b      	str	r3, [r7, #20]
  return(result);
 8003f70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d028      	beq.n	8003fc8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <osMessageQueueGet+0x34>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <osMessageQueueGet+0x34>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003f88:	f06f 0303 	mvn.w	r3, #3
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	e037      	b.n	8004000 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	69b8      	ldr	r0, [r7, #24]
 8003f9e:	f000 fed9 	bl	8004d54 <xQueueReceiveFromISR>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d003      	beq.n	8003fb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003fa8:	f06f 0302 	mvn.w	r3, #2
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e027      	b.n	8004000 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d024      	beq.n	8004000 <osMessageQueueGet+0xac>
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <osMessageQueueGet+0xb8>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	e01b      	b.n	8004000 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <osMessageQueueGet+0x80>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003fd4:	f06f 0303 	mvn.w	r3, #3
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	e011      	b.n	8004000 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	69b8      	ldr	r0, [r7, #24]
 8003fe2:	f000 fccb 	bl	800497c <xQueueReceive>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d009      	beq.n	8004000 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003ff2:	f06f 0301 	mvn.w	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e002      	b.n	8004000 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003ffa:	f06f 0302 	mvn.w	r3, #2
 8003ffe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004000:	69fb      	ldr	r3, [r7, #28]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <vApplicationGetIdleTaskMemory+0x2c>)
 8004020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4a06      	ldr	r2, [pc, #24]	; (8004040 <vApplicationGetIdleTaskMemory+0x30>)
 8004026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200001d8 	.word	0x200001d8
 8004040:	20000294 	.word	0x20000294

08004044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <vApplicationGetTimerTaskMemory+0x2c>)
 8004054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4a06      	ldr	r2, [pc, #24]	; (8004074 <vApplicationGetTimerTaskMemory+0x30>)
 800405a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	20000494 	.word	0x20000494
 8004074:	20000550 	.word	0x20000550

08004078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f103 0208 	add.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f103 0208 	add.w	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f103 0208 	add.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d103      	bne.n	800413a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e00c      	b.n	8004154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3308      	adds	r3, #8
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	e002      	b.n	8004148 <vListInsert+0x2e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	d2f6      	bcs.n	8004142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6892      	ldr	r2, [r2, #8]
 80041a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6852      	ldr	r2, [r2, #4]
 80041ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d103      	bne.n	80041c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1e5a      	subs	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800420a:	f002 fc9b 	bl	8006b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	441a      	add	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	3b01      	subs	r3, #1
 800423c:	68f9      	ldr	r1, [r7, #12]
 800423e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	22ff      	movs	r2, #255	; 0xff
 800424e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d114      	bne.n	800428a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3310      	adds	r3, #16
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fc4b 	bl	8005b08 <xTaskRemoveFromEventList>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d012      	beq.n	800429e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <xQueueGenericReset+0xcc>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	e009      	b.n	800429e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3310      	adds	r3, #16
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fef2 	bl	8004078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff feed 	bl	8004078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800429e:	f002 fc81 	bl	8006ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042a2:	2301      	movs	r3, #1
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <xQueueGenericCreateStatic+0x52>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <xQueueGenericCreateStatic+0x56>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <xQueueGenericCreateStatic+0x58>
 8004306:	2300      	movs	r3, #0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	623b      	str	r3, [r7, #32]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <xQueueGenericCreateStatic+0x7e>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <xQueueGenericCreateStatic+0x82>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <xQueueGenericCreateStatic+0x84>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	61fb      	str	r3, [r7, #28]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800434e:	2350      	movs	r3, #80	; 0x50
 8004350:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d00a      	beq.n	800436e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61bb      	str	r3, [r7, #24]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800436e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004382:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	4613      	mov	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f83f 	bl	8004414 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004398:	4618      	mov	r0, r3
 800439a:	3730      	adds	r7, #48	; 0x30
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3350      	adds	r3, #80	; 0x50
 80043d8:	4618      	mov	r0, r3
 80043da:	f002 fcd5 	bl	8006d88 <pvPortMalloc>
 80043de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3350      	adds	r3, #80	; 0x50
 80043ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f8:	79fa      	ldrb	r2, [r7, #7]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f805 	bl	8004414 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800440a:	69bb      	ldr	r3, [r7, #24]
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e002      	b.n	8004436 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004442:	2101      	movs	r1, #1
 8004444:	69b8      	ldr	r0, [r7, #24]
 8004446:	f7ff fecb 	bl	80041e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800445a:	b580      	push	{r7, lr}
 800445c:	b08a      	sub	sp, #40	; 0x28
 800445e:	af02      	add	r7, sp, #8
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	61bb      	str	r3, [r7, #24]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90a      	bls.n	80044a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	617b      	str	r3, [r7, #20]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80044a0:	2302      	movs	r3, #2
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2100      	movs	r1, #0
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff ff00 	bl	80042b0 <xQueueGenericCreateStatic>
 80044b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80044be:	69fb      	ldr	r3, [r7, #28]
	}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	613b      	str	r3, [r7, #16]
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90a      	bls.n	800450c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	60fb      	str	r3, [r7, #12]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800450c:	2202      	movs	r2, #2
 800450e:	2100      	movs	r1, #0
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff45 	bl	80043a0 <xQueueGenericCreate>
 8004516:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004524:	697b      	ldr	r3, [r7, #20]
	}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	; 0x38
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericSend+0x32>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <xQueueGenericSend+0x40>
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <xQueueGenericSend+0x44>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <xQueueGenericSend+0x46>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <xQueueGenericSend+0x60>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d103      	bne.n	800459e <xQueueGenericSend+0x6e>
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <xQueueGenericSend+0x72>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericSend+0x74>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xQueueGenericSend+0x8e>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	623b      	str	r3, [r7, #32]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045be:	f001 fc65 	bl	8005e8c <xTaskGetSchedulerState>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <xQueueGenericSend+0x9e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSend+0xa2>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSend+0xa4>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGenericSend+0xbe>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61fb      	str	r3, [r7, #28]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ee:	f002 faa9 	bl	8006b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <xQueueGenericSend+0xd4>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d129      	bne.n	8004658 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460a:	f000 fc5e 	bl	8004eca <prvCopyDataToQueue>
 800460e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fa73 	bl	8005b08 <xTaskRemoveFromEventList>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004628:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <xQueueGenericSend+0x1f8>)
 800462a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	e00a      	b.n	8004650 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004640:	4b39      	ldr	r3, [pc, #228]	; (8004728 <xQueueGenericSend+0x1f8>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004650:	f002 faa8 	bl	8006ba4 <vPortExitCritical>
				return pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	e063      	b.n	8004720 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800465e:	f002 faa1 	bl	8006ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004662:	2300      	movs	r3, #0
 8004664:	e05c      	b.n	8004720 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4618      	mov	r0, r3
 8004672:	f001 faad 	bl	8005bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004676:	2301      	movs	r3, #1
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800467a:	f002 fa93 	bl	8006ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800467e:	f001 f819 	bl	80056b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004682:	f002 fa5f 	bl	8006b44 <vPortEnterCritical>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468c:	b25b      	sxtb	r3, r3
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <xQueueGenericSend+0x16c>
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d103      	bne.n	80046b2 <xQueueGenericSend+0x182>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b2:	f002 fa77 	bl	8006ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b6:	1d3a      	adds	r2, r7, #4
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fa9c 	bl	8005bfc <xTaskCheckForTimeOut>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d124      	bne.n	8004714 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046cc:	f000 fcf5 	bl	80050ba <prvIsQueueFull>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	3310      	adds	r3, #16
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f9c2 	bl	8005a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 fc80 	bl	8004fea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ea:	f000 fff1 	bl	80056d0 <xTaskResumeAll>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f47f af7c 	bne.w	80045ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <xQueueGenericSend+0x1f8>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	e772      	b.n	80045ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470a:	f000 fc6e 	bl	8004fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800470e:	f000 ffdf 	bl	80056d0 <xTaskResumeAll>
 8004712:	e76c      	b.n	80045ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004716:	f000 fc68 	bl	8004fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800471a:	f000 ffd9 	bl	80056d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800471e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004720:	4618      	mov	r0, r3
 8004722:	3738      	adds	r7, #56	; 0x38
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b090      	sub	sp, #64	; 0x40
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <xQueueGenericSendFromISR+0x3c>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <xQueueGenericSendFromISR+0x40>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <xQueueGenericSendFromISR+0x42>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d103      	bne.n	8004796 <xQueueGenericSendFromISR+0x6a>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <xQueueGenericSendFromISR+0x6e>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGenericSendFromISR+0x70>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047b6:	f002 faa7 	bl	8006d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ba:	f3ef 8211 	mrs	r2, BASEPRI
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61fa      	str	r2, [r7, #28]
 80047d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	429a      	cmp	r2, r3
 80047e0:	d302      	bcc.n	80047e8 <xQueueGenericSendFromISR+0xbc>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d12f      	bne.n	8004848 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047fe:	f000 fb64 	bl	8004eca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004802:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d112      	bne.n	8004832 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f975 	bl	8005b08 <xTaskRemoveFromEventList>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e007      	b.n	8004842 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004836:	3301      	adds	r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	b25a      	sxtb	r2, r3
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004842:	2301      	movs	r3, #1
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004846:	e001      	b.n	800484c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004848:	2300      	movs	r3, #0
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004856:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800485a:	4618      	mov	r0, r3
 800485c:	3740      	adds	r7, #64	; 0x40
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08e      	sub	sp, #56	; 0x38
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	623b      	str	r3, [r7, #32]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <xQueueGiveFromISR+0x48>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	61fb      	str	r3, [r7, #28]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <xQueueGiveFromISR+0x58>
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <xQueueGiveFromISR+0x5c>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGiveFromISR+0x5e>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGiveFromISR+0x78>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61bb      	str	r3, [r7, #24]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048da:	f002 fa15 	bl	8006d08 <vPortValidateInterruptPriority>
	__asm volatile
 80048de:	f3ef 8211 	mrs	r2, BASEPRI
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	617a      	str	r2, [r7, #20]
 80048f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80048f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004906:	429a      	cmp	r2, r3
 8004908:	d22b      	bcs.n	8004962 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800491c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d112      	bne.n	800494c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	3324      	adds	r3, #36	; 0x24
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f8e8 	bl	8005b08 <xTaskRemoveFromEventList>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e007      	b.n	800495c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800494c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004950:	3301      	adds	r3, #1
 8004952:	b2db      	uxtb	r3, r3
 8004954:	b25a      	sxtb	r2, r3
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800495c:	2301      	movs	r3, #1
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
 8004960:	e001      	b.n	8004966 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004962:	2300      	movs	r3, #0
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f383 8811 	msr	BASEPRI, r3
}
 8004970:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004974:	4618      	mov	r0, r3
 8004976:	3738      	adds	r7, #56	; 0x38
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	; 0x30
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <xQueueReceive+0x30>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	623b      	str	r3, [r7, #32]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <xQueueReceive+0x3e>
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <xQueueReceive+0x42>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <xQueueReceive+0x44>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xQueueReceive+0x5e>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61fb      	str	r3, [r7, #28]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049da:	f001 fa57 	bl	8005e8c <xTaskGetSchedulerState>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <xQueueReceive+0x6e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <xQueueReceive+0x72>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueReceive+0x74>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueReceive+0x8e>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61bb      	str	r3, [r7, #24]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a0a:	f002 f89b 	bl	8006b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01f      	beq.n	8004a5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1e:	f000 fabe 	bl	8004f9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1e5a      	subs	r2, r3, #1
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00f      	beq.n	8004a52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	3310      	adds	r3, #16
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f866 	bl	8005b08 <xTaskRemoveFromEventList>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a42:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <xQueueReceive+0x1bc>)
 8004a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a52:	f002 f8a7 	bl	8006ba4 <vPortExitCritical>
				return pdPASS;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e069      	b.n	8004b2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a60:	f002 f8a0 	bl	8006ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e062      	b.n	8004b2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a6e:	f107 0310 	add.w	r3, r7, #16
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 f8ac 	bl	8005bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a7c:	f002 f892 	bl	8006ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a80:	f000 fe18 	bl	80056b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a84:	f002 f85e 	bl	8006b44 <vPortEnterCritical>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8e:	b25b      	sxtb	r3, r3
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d103      	bne.n	8004a9e <xQueueReceive+0x122>
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d103      	bne.n	8004ab4 <xQueueReceive+0x138>
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab4:	f002 f876 	bl	8006ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ab8:	1d3a      	adds	r2, r7, #4
 8004aba:	f107 0310 	add.w	r3, r7, #16
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 f89b 	bl	8005bfc <xTaskCheckForTimeOut>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d123      	bne.n	8004b14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ace:	f000 fade 	bl	800508e <prvIsQueueEmpty>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d017      	beq.n	8004b08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 ffc1 	bl	8005a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae8:	f000 fa7f 	bl	8004fea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aec:	f000 fdf0 	bl	80056d0 <xTaskResumeAll>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d189      	bne.n	8004a0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <xQueueReceive+0x1bc>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	e780      	b.n	8004a0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f000 fa6e 	bl	8004fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b0e:	f000 fddf 	bl	80056d0 <xTaskResumeAll>
 8004b12:	e77a      	b.n	8004a0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b16:	f000 fa68 	bl	8004fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b1a:	f000 fdd9 	bl	80056d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b20:	f000 fab5 	bl	800508e <prvIsQueueEmpty>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f43f af6f 	beq.w	8004a0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3730      	adds	r7, #48	; 0x30
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	; 0x38
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	61fb      	str	r3, [r7, #28]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b8c:	f001 f97e 	bl	8005e8c <xTaskGetSchedulerState>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <xQueueSemaphoreTake+0x60>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <xQueueSemaphoreTake+0x64>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <xQueueSemaphoreTake+0x66>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	61bb      	str	r3, [r7, #24]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bbc:	f001 ffc2 	bl	8006b44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d024      	beq.n	8004c16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004bdc:	f001 facc 	bl	8006178 <pvTaskIncrementMutexHeldCount>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00f      	beq.n	8004c0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 ff88 	bl	8005b08 <xTaskRemoveFromEventList>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bfe:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <xQueueSemaphoreTake+0x214>)
 8004c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c0e:	f001 ffc9 	bl	8006ba4 <vPortExitCritical>
				return pdPASS;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e097      	b.n	8004d46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d111      	bne.n	8004c40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	617b      	str	r3, [r7, #20]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c38:	f001 ffb4 	bl	8006ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e082      	b.n	8004d46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 ffc0 	bl	8005bd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c54:	f001 ffa6 	bl	8006ba4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c58:	f000 fd2c 	bl	80056b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c5c:	f001 ff72 	bl	8006b44 <vPortEnterCritical>
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d103      	bne.n	8004c76 <xQueueSemaphoreTake+0x13a>
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d103      	bne.n	8004c8c <xQueueSemaphoreTake+0x150>
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c8c:	f001 ff8a 	bl	8006ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c90:	463a      	mov	r2, r7
 8004c92:	f107 030c 	add.w	r3, r7, #12
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 ffaf 	bl	8005bfc <xTaskCheckForTimeOut>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d132      	bne.n	8004d0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ca6:	f000 f9f2 	bl	800508e <prvIsQueueEmpty>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d026      	beq.n	8004cfe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004cb8:	f001 ff44 	bl	8006b44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 f901 	bl	8005ec8 <xTaskPriorityInherit>
 8004cc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004cc8:	f001 ff6c 	bl	8006ba4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	3324      	adds	r3, #36	; 0x24
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fec7 	bl	8005a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cdc:	f000 f985 	bl	8004fea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ce0:	f000 fcf6 	bl	80056d0 <xTaskResumeAll>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f47f af68 	bne.w	8004bbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004cec:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <xQueueSemaphoreTake+0x214>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	e75e      	b.n	8004bbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d00:	f000 f973 	bl	8004fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d04:	f000 fce4 	bl	80056d0 <xTaskResumeAll>
 8004d08:	e758      	b.n	8004bbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d0c:	f000 f96d 	bl	8004fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d10:	f000 fcde 	bl	80056d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d16:	f000 f9ba 	bl	800508e <prvIsQueueEmpty>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f43f af4d 	beq.w	8004bbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00d      	beq.n	8004d44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004d28:	f001 ff0c 	bl	8006b44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d2e:	f000 f8b4 	bl	8004e9a <prvGetDisinheritPriorityAfterTimeout>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f99a 	bl	8006074 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d40:	f001 ff30 	bl	8006ba4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3738      	adds	r7, #56	; 0x38
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	; 0x38
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	623b      	str	r3, [r7, #32]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <xQueueReceiveFromISR+0x3a>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <xQueueReceiveFromISR+0x3e>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <xQueueReceiveFromISR+0x40>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	61fb      	str	r3, [r7, #28]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dae:	f001 ffab 	bl	8006d08 <vPortValidateInterruptPriority>
	__asm volatile
 8004db2:	f3ef 8211 	mrs	r2, BASEPRI
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61ba      	str	r2, [r7, #24]
 8004dc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004dca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02f      	beq.n	8004e3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004de8:	f000 f8d9 	bl	8004f9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	1e5a      	subs	r2, r3, #1
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004df4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d112      	bne.n	8004e24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	3310      	adds	r3, #16
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fe7c 	bl	8005b08 <xTaskRemoveFromEventList>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e28:	3301      	adds	r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	b25a      	sxtb	r2, r3
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e34:	2301      	movs	r3, #1
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
 8004e38:	e001      	b.n	8004e3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f383 8811 	msr	BASEPRI, r3
}
 8004e48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3738      	adds	r7, #56	; 0x38
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <vQueueDelete+0x28>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f95f 	bl	8005140 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f002 f847 	bl	8006f20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d006      	beq.n	8004eb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e001      	b.n	8004ebc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
	}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d14d      	bne.n	8004f8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 f84f 	bl	8005f98 <xTaskPriorityDisinherit>
 8004efa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
 8004f02:	e043      	b.n	8004f8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d119      	bne.n	8004f3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6858      	ldr	r0, [r3, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	461a      	mov	r2, r3
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	f002 f94d 	bl	80071b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	441a      	add	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d32b      	bcc.n	8004f8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	e026      	b.n	8004f8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	68d8      	ldr	r0, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	461a      	mov	r2, r3
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	f002 f933 	bl	80071b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	425b      	negs	r3, r3
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d207      	bcs.n	8004f7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	425b      	negs	r3, r3
 8004f74:	441a      	add	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d105      	bne.n	8004f8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f94:	697b      	ldr	r3, [r7, #20]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d018      	beq.n	8004fe2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d303      	bcc.n	8004fd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68d9      	ldr	r1, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6838      	ldr	r0, [r7, #0]
 8004fde:	f002 f8e9 	bl	80071b4 <memcpy>
	}
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ff2:	f001 fda7 	bl	8006b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ffc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ffe:	e011      	b.n	8005024 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d012      	beq.n	800502e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3324      	adds	r3, #36	; 0x24
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fd7b 	bl	8005b08 <xTaskRemoveFromEventList>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005018:	f000 fe52 	bl	8005cc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	3b01      	subs	r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	dce9      	bgt.n	8005000 <prvUnlockQueue+0x16>
 800502c:	e000      	b.n	8005030 <prvUnlockQueue+0x46>
					break;
 800502e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005038:	f001 fdb4 	bl	8006ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800503c:	f001 fd82 	bl	8006b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005046:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005048:	e011      	b.n	800506e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d012      	beq.n	8005078 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3310      	adds	r3, #16
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fd56 	bl	8005b08 <xTaskRemoveFromEventList>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005062:	f000 fe2d 	bl	8005cc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005066:	7bbb      	ldrb	r3, [r7, #14]
 8005068:	3b01      	subs	r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800506e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dce9      	bgt.n	800504a <prvUnlockQueue+0x60>
 8005076:	e000      	b.n	800507a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005078:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	22ff      	movs	r2, #255	; 0xff
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005082:	f001 fd8f 	bl	8006ba4 <vPortExitCritical>
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005096:	f001 fd55 	bl	8006b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e001      	b.n	80050ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ac:	f001 fd7a 	bl	8006ba4 <vPortExitCritical>

	return xReturn;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c2:	f001 fd3f 	bl	8006b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d102      	bne.n	80050d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e001      	b.n	80050dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050dc:	f001 fd62 	bl	8006ba4 <vPortExitCritical>

	return xReturn;
 80050e0:	68fb      	ldr	r3, [r7, #12]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e014      	b.n	8005126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050fc:	4a0f      	ldr	r2, [pc, #60]	; (800513c <vQueueAddToRegistry+0x50>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005108:	490c      	ldr	r1, [pc, #48]	; (800513c <vQueueAddToRegistry+0x50>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <vQueueAddToRegistry+0x50>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800511e:	e006      	b.n	800512e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b07      	cmp	r3, #7
 800512a:	d9e7      	bls.n	80050fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000950 	.word	0x20000950

08005140 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e016      	b.n	800517c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <vQueueUnregisterQueue+0x50>)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d10b      	bne.n	8005176 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800515e:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <vQueueUnregisterQueue+0x50>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2100      	movs	r1, #0
 8005164:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005168:	4a09      	ldr	r2, [pc, #36]	; (8005190 <vQueueUnregisterQueue+0x50>)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	2200      	movs	r2, #0
 8005172:	605a      	str	r2, [r3, #4]
				break;
 8005174:	e006      	b.n	8005184 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3301      	adds	r3, #1
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b07      	cmp	r3, #7
 8005180:	d9e5      	bls.n	800514e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000950 	.word	0x20000950

08005194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051a4:	f001 fcce 	bl	8006b44 <vPortEnterCritical>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d103      	bne.n	80051be <vQueueWaitForMessageRestricted+0x2a>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c4:	b25b      	sxtb	r3, r3
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d103      	bne.n	80051d4 <vQueueWaitForMessageRestricted+0x40>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d4:	f001 fce6 	bl	8006ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fc61 	bl	8005ab0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051ee:	6978      	ldr	r0, [r7, #20]
 80051f0:	f7ff fefb 	bl	8004fea <prvUnlockQueue>
	}
 80051f4:	bf00      	nop
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08e      	sub	sp, #56	; 0x38
 8005200:	af04      	add	r7, sp, #16
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	623b      	str	r3, [r7, #32]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTaskCreateStatic+0x46>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61fb      	str	r3, [r7, #28]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005242:	23bc      	movs	r3, #188	; 0xbc
 8005244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2bbc      	cmp	r3, #188	; 0xbc
 800524a:	d00a      	beq.n	8005262 <xTaskCreateStatic+0x66>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	61bb      	str	r3, [r7, #24]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005262:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01e      	beq.n	80052a8 <xTaskCreateStatic+0xac>
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005278:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	2202      	movs	r2, #2
 800527e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005282:	2300      	movs	r3, #0
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	f107 0314 	add.w	r3, r7, #20
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f850 	bl	8005340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052a2:	f000 f8f3 	bl	800548c <prvAddNewTaskToReadyList>
 80052a6:	e001      	b.n	80052ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052ac:	697b      	ldr	r3, [r7, #20]
	}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b08c      	sub	sp, #48	; 0x30
 80052ba:	af04      	add	r7, sp, #16
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 fd5c 	bl	8006d88 <pvPortMalloc>
 80052d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052d8:	20bc      	movs	r0, #188	; 0xbc
 80052da:	f001 fd55 	bl	8006d88 <pvPortMalloc>
 80052de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
 80052ec:	e005      	b.n	80052fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052ee:	6978      	ldr	r0, [r7, #20]
 80052f0:	f001 fe16 	bl	8006f20 <vPortFree>
 80052f4:	e001      	b.n	80052fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d017      	beq.n	8005330 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005308:	88fa      	ldrh	r2, [r7, #6]
 800530a:	2300      	movs	r3, #0
 800530c:	9303      	str	r3, [sp, #12]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	9302      	str	r3, [sp, #8]
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f80e 	bl	8005340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005324:	69f8      	ldr	r0, [r7, #28]
 8005326:	f000 f8b1 	bl	800548c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800532a:	2301      	movs	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e002      	b.n	8005336 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005330:	f04f 33ff 	mov.w	r3, #4294967295
 8005334:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005336:	69bb      	ldr	r3, [r7, #24]
	}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	461a      	mov	r2, r3
 8005358:	21a5      	movs	r1, #165	; 0xa5
 800535a:	f001 ff39 	bl	80071d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005368:	3b01      	subs	r3, #1
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f023 0307 	bic.w	r3, r3, #7
 8005376:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	617b      	str	r3, [r7, #20]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01f      	beq.n	80053de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	e012      	b.n	80053ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	7819      	ldrb	r1, [r3, #0]
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	3334      	adds	r3, #52	; 0x34
 80053b4:	460a      	mov	r2, r1
 80053b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b0f      	cmp	r3, #15
 80053ce:	d9e9      	bls.n	80053a4 <prvInitialiseNewTask+0x64>
 80053d0:	e000      	b.n	80053d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80053d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053dc:	e003      	b.n	80053e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	2b37      	cmp	r3, #55	; 0x37
 80053ea:	d901      	bls.n	80053f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053ec:	2337      	movs	r3, #55	; 0x37
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2200      	movs	r2, #0
 8005400:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	3304      	adds	r3, #4
 8005406:	4618      	mov	r0, r3
 8005408:	f7fe fe56 	bl	80040b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	3318      	adds	r3, #24
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fe51 	bl	80040b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2200      	movs	r2, #0
 8005430:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2200      	movs	r2, #0
 8005438:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	3354      	adds	r3, #84	; 0x54
 8005440:	2260      	movs	r2, #96	; 0x60
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f001 fec3 	bl	80071d0 <memset>
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <prvInitialiseNewTask+0x140>)
 800544e:	659a      	str	r2, [r3, #88]	; 0x58
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <prvInitialiseNewTask+0x144>)
 8005454:	65da      	str	r2, [r3, #92]	; 0x5c
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <prvInitialiseNewTask+0x148>)
 800545a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	69b8      	ldr	r0, [r7, #24]
 8005462:	f001 fa3f 	bl	80068e4 <pxPortInitialiseStack>
 8005466:	4602      	mov	r2, r0
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005476:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005478:	bf00      	nop
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	08007c54 	.word	0x08007c54
 8005484:	08007c74 	.word	0x08007c74
 8005488:	08007c34 	.word	0x08007c34

0800548c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005494:	f001 fb56 	bl	8006b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005498:	4b2d      	ldr	r3, [pc, #180]	; (8005550 <prvAddNewTaskToReadyList+0xc4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <prvAddNewTaskToReadyList+0xc4>)
 80054a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054a2:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054aa:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <prvAddNewTaskToReadyList+0xc4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d110      	bne.n	80054da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054b8:	f000 fc26 	bl	8005d08 <prvInitialiseTaskLists>
 80054bc:	e00d      	b.n	80054da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <prvAddNewTaskToReadyList+0xcc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054c6:	4b23      	ldr	r3, [pc, #140]	; (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d802      	bhi.n	80054da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <prvAddNewTaskToReadyList+0xc8>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <prvAddNewTaskToReadyList+0xd0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	4a1e      	ldr	r2, [pc, #120]	; (800555c <prvAddNewTaskToReadyList+0xd0>)
 80054e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054e4:	4b1d      	ldr	r3, [pc, #116]	; (800555c <prvAddNewTaskToReadyList+0xd0>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <prvAddNewTaskToReadyList+0xd4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d903      	bls.n	8005500 <prvAddNewTaskToReadyList+0x74>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a18      	ldr	r2, [pc, #96]	; (8005560 <prvAddNewTaskToReadyList+0xd4>)
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <prvAddNewTaskToReadyList+0xd8>)
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7fe fddb 	bl	80040d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800551c:	f001 fb42 	bl	8006ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <prvAddNewTaskToReadyList+0xcc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <prvAddNewTaskToReadyList+0xc8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	429a      	cmp	r2, r3
 8005534:	d207      	bcs.n	8005546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvAddNewTaskToReadyList+0xdc>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000e64 	.word	0x20000e64
 8005554:	20000990 	.word	0x20000990
 8005558:	20000e70 	.word	0x20000e70
 800555c:	20000e80 	.word	0x20000e80
 8005560:	20000e6c 	.word	0x20000e6c
 8005564:	20000994 	.word	0x20000994
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <vTaskDelay+0x60>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <vTaskDelay+0x30>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800559c:	f000 f88a 	bl	80056b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055a0:	2100      	movs	r1, #0
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fdfc 	bl	80061a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055a8:	f000 f892 	bl	80056d0 <xTaskResumeAll>
 80055ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <vTaskDelay+0x64>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000e8c 	.word	0x20000e8c
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055e2:	463a      	mov	r2, r7
 80055e4:	1d39      	adds	r1, r7, #4
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fd10 	bl	8004010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	9202      	str	r2, [sp, #8]
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	460a      	mov	r2, r1
 8005602:	4924      	ldr	r1, [pc, #144]	; (8005694 <vTaskStartScheduler+0xc0>)
 8005604:	4824      	ldr	r0, [pc, #144]	; (8005698 <vTaskStartScheduler+0xc4>)
 8005606:	f7ff fdf9 	bl	80051fc <xTaskCreateStatic>
 800560a:	4603      	mov	r3, r0
 800560c:	4a23      	ldr	r2, [pc, #140]	; (800569c <vTaskStartScheduler+0xc8>)
 800560e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005610:	4b22      	ldr	r3, [pc, #136]	; (800569c <vTaskStartScheduler+0xc8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e001      	b.n	8005622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d102      	bne.n	800562e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005628:	f000 fe0e 	bl	8006248 <xTimerCreateTimerTask>
 800562c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d11b      	bne.n	800566c <vTaskStartScheduler+0x98>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
}
 8005646:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005648:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <vTaskStartScheduler+0xcc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3354      	adds	r3, #84	; 0x54
 800564e:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <vTaskStartScheduler+0xd0>)
 8005650:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <vTaskStartScheduler+0xd4>)
 8005654:	f04f 32ff 	mov.w	r2, #4294967295
 8005658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800565a:	4b14      	ldr	r3, [pc, #80]	; (80056ac <vTaskStartScheduler+0xd8>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005660:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <vTaskStartScheduler+0xdc>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005666:	f001 f9cb 	bl	8006a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800566a:	e00e      	b.n	800568a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005672:	d10a      	bne.n	800568a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60fb      	str	r3, [r7, #12]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <vTaskStartScheduler+0xb4>
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	08007bbc 	.word	0x08007bbc
 8005698:	08005cd9 	.word	0x08005cd9
 800569c:	20000e88 	.word	0x20000e88
 80056a0:	20000990 	.word	0x20000990
 80056a4:	20000010 	.word	0x20000010
 80056a8:	20000e84 	.word	0x20000e84
 80056ac:	20000e70 	.word	0x20000e70
 80056b0:	20000e68 	.word	0x20000e68

080056b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <vTaskSuspendAll+0x18>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a03      	ldr	r2, [pc, #12]	; (80056cc <vTaskSuspendAll+0x18>)
 80056c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056c2:	bf00      	nop
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	20000e8c 	.word	0x20000e8c

080056d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056de:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <xTaskResumeAll+0x118>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <xTaskResumeAll+0x2c>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056fc:	f001 fa22 	bl	8006b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <xTaskResumeAll+0x118>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	4a38      	ldr	r2, [pc, #224]	; (80057e8 <xTaskResumeAll+0x118>)
 8005708:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800570a:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <xTaskResumeAll+0x118>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d162      	bne.n	80057d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005712:	4b36      	ldr	r3, [pc, #216]	; (80057ec <xTaskResumeAll+0x11c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d05e      	beq.n	80057d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800571a:	e02f      	b.n	800577c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571c:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <xTaskResumeAll+0x120>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3318      	adds	r3, #24
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe fd2f 	bl	800418c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3304      	adds	r3, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fd2a 	bl	800418c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4b2d      	ldr	r3, [pc, #180]	; (80057f4 <xTaskResumeAll+0x124>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d903      	bls.n	800574c <xTaskResumeAll+0x7c>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	4a2a      	ldr	r2, [pc, #168]	; (80057f4 <xTaskResumeAll+0x124>)
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4a27      	ldr	r2, [pc, #156]	; (80057f8 <xTaskResumeAll+0x128>)
 800575a:	441a      	add	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3304      	adds	r3, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f7fe fcb5 	bl	80040d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	4b23      	ldr	r3, [pc, #140]	; (80057fc <xTaskResumeAll+0x12c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005776:	4b22      	ldr	r3, [pc, #136]	; (8005800 <xTaskResumeAll+0x130>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800577c:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <xTaskResumeAll+0x120>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1cb      	bne.n	800571c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800578a:	f000 fb5f 	bl	8005e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <xTaskResumeAll+0x134>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d010      	beq.n	80057bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800579a:	f000 f847 	bl	800582c <xTaskIncrementTick>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <xTaskResumeAll+0x130>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f1      	bne.n	800579a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <xTaskResumeAll+0x134>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <xTaskResumeAll+0x130>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d009      	beq.n	80057d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057c4:	2301      	movs	r3, #1
 80057c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057c8:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <xTaskResumeAll+0x138>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057d8:	f001 f9e4 	bl	8006ba4 <vPortExitCritical>

	return xAlreadyYielded;
 80057dc:	68bb      	ldr	r3, [r7, #8]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000e8c 	.word	0x20000e8c
 80057ec:	20000e64 	.word	0x20000e64
 80057f0:	20000e24 	.word	0x20000e24
 80057f4:	20000e6c 	.word	0x20000e6c
 80057f8:	20000994 	.word	0x20000994
 80057fc:	20000990 	.word	0x20000990
 8005800:	20000e78 	.word	0x20000e78
 8005804:	20000e74 	.word	0x20000e74
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <xTaskGetTickCount+0x1c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005818:	687b      	ldr	r3, [r7, #4]
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000e68 	.word	0x20000e68

0800582c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005836:	4b4f      	ldr	r3, [pc, #316]	; (8005974 <xTaskIncrementTick+0x148>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 808f 	bne.w	800595e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005840:	4b4d      	ldr	r3, [pc, #308]	; (8005978 <xTaskIncrementTick+0x14c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005848:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <xTaskIncrementTick+0x14c>)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d120      	bne.n	8005896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005854:	4b49      	ldr	r3, [pc, #292]	; (800597c <xTaskIncrementTick+0x150>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <xTaskIncrementTick+0x48>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	603b      	str	r3, [r7, #0]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <xTaskIncrementTick+0x46>
 8005874:	4b41      	ldr	r3, [pc, #260]	; (800597c <xTaskIncrementTick+0x150>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	4b41      	ldr	r3, [pc, #260]	; (8005980 <xTaskIncrementTick+0x154>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3f      	ldr	r2, [pc, #252]	; (800597c <xTaskIncrementTick+0x150>)
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	4a3f      	ldr	r2, [pc, #252]	; (8005980 <xTaskIncrementTick+0x154>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4b3e      	ldr	r3, [pc, #248]	; (8005984 <xTaskIncrementTick+0x158>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a3d      	ldr	r2, [pc, #244]	; (8005984 <xTaskIncrementTick+0x158>)
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	f000 fadb 	bl	8005e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005896:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <xTaskIncrementTick+0x15c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	429a      	cmp	r2, r3
 800589e:	d349      	bcc.n	8005934 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a0:	4b36      	ldr	r3, [pc, #216]	; (800597c <xTaskIncrementTick+0x150>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058aa:	4b37      	ldr	r3, [pc, #220]	; (8005988 <xTaskIncrementTick+0x15c>)
 80058ac:	f04f 32ff 	mov.w	r2, #4294967295
 80058b0:	601a      	str	r2, [r3, #0]
					break;
 80058b2:	e03f      	b.n	8005934 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b4:	4b31      	ldr	r3, [pc, #196]	; (800597c <xTaskIncrementTick+0x150>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d203      	bcs.n	80058d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058cc:	4a2e      	ldr	r2, [pc, #184]	; (8005988 <xTaskIncrementTick+0x15c>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058d2:	e02f      	b.n	8005934 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fc57 	bl	800418c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3318      	adds	r3, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fc4e 	bl	800418c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4b25      	ldr	r3, [pc, #148]	; (800598c <xTaskIncrementTick+0x160>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d903      	bls.n	8005904 <xTaskIncrementTick+0xd8>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	4a22      	ldr	r2, [pc, #136]	; (800598c <xTaskIncrementTick+0x160>)
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <xTaskIncrementTick+0x164>)
 8005912:	441a      	add	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f7fe fbd9 	bl	80040d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <xTaskIncrementTick+0x168>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	429a      	cmp	r2, r3
 800592c:	d3b8      	bcc.n	80058a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005932:	e7b5      	b.n	80058a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <xTaskIncrementTick+0x168>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	4915      	ldr	r1, [pc, #84]	; (8005990 <xTaskIncrementTick+0x164>)
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d901      	bls.n	8005950 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <xTaskIncrementTick+0x16c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e004      	b.n	8005968 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <xTaskIncrementTick+0x170>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	4a0d      	ldr	r2, [pc, #52]	; (800599c <xTaskIncrementTick+0x170>)
 8005966:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005968:	697b      	ldr	r3, [r7, #20]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000e8c 	.word	0x20000e8c
 8005978:	20000e68 	.word	0x20000e68
 800597c:	20000e1c 	.word	0x20000e1c
 8005980:	20000e20 	.word	0x20000e20
 8005984:	20000e7c 	.word	0x20000e7c
 8005988:	20000e84 	.word	0x20000e84
 800598c:	20000e6c 	.word	0x20000e6c
 8005990:	20000994 	.word	0x20000994
 8005994:	20000990 	.word	0x20000990
 8005998:	20000e78 	.word	0x20000e78
 800599c:	20000e74 	.word	0x20000e74

080059a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059a6:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <vTaskSwitchContext+0xb0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059ae:	4b29      	ldr	r3, [pc, #164]	; (8005a54 <vTaskSwitchContext+0xb4>)
 80059b0:	2201      	movs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059b4:	e046      	b.n	8005a44 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80059b6:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <vTaskSwitchContext+0xb4>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059bc:	4b26      	ldr	r3, [pc, #152]	; (8005a58 <vTaskSwitchContext+0xb8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e010      	b.n	80059e6 <vTaskSwitchContext+0x46>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	607b      	str	r3, [r7, #4]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <vTaskSwitchContext+0x3e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	491d      	ldr	r1, [pc, #116]	; (8005a5c <vTaskSwitchContext+0xbc>)
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0e4      	beq.n	80059c4 <vTaskSwitchContext+0x24>
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <vTaskSwitchContext+0xbc>)
 8005a06:	4413      	add	r3, r2
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	605a      	str	r2, [r3, #4]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d104      	bne.n	8005a2a <vTaskSwitchContext+0x8a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <vTaskSwitchContext+0xc0>)
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <vTaskSwitchContext+0xb8>)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <vTaskSwitchContext+0xc0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3354      	adds	r3, #84	; 0x54
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <vTaskSwitchContext+0xc4>)
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000e8c 	.word	0x20000e8c
 8005a54:	20000e78 	.word	0x20000e78
 8005a58:	20000e6c 	.word	0x20000e6c
 8005a5c:	20000994 	.word	0x20000994
 8005a60:	20000990 	.word	0x20000990
 8005a64:	20000010 	.word	0x20000010

08005a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <vTaskPlaceOnEventList+0x44>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3318      	adds	r3, #24
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fe fb3f 	bl	800411a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	6838      	ldr	r0, [r7, #0]
 8005aa0:	f000 fb7e 	bl	80061a0 <prvAddCurrentTaskToDelayedList>
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20000990 	.word	0x20000990

08005ab0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	617b      	str	r3, [r7, #20]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3318      	adds	r3, #24
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7fe faf6 	bl	80040d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
 8005af0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68b8      	ldr	r0, [r7, #8]
 8005af6:	f000 fb53 	bl	80061a0 <prvAddCurrentTaskToDelayedList>
	}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000990 	.word	0x20000990

08005b08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60fb      	str	r3, [r7, #12]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	3318      	adds	r3, #24
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fb27 	bl	800418c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b3e:	4b1e      	ldr	r3, [pc, #120]	; (8005bb8 <xTaskRemoveFromEventList+0xb0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d11d      	bne.n	8005b82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fb1e 	bl	800418c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <xTaskRemoveFromEventList+0xb4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d903      	bls.n	8005b64 <xTaskRemoveFromEventList+0x5c>
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <xTaskRemoveFromEventList+0xb4>)
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <xTaskRemoveFromEventList+0xb8>)
 8005b72:	441a      	add	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fe faa9 	bl	80040d2 <vListInsertEnd>
 8005b80:	e005      	b.n	8005b8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	3318      	adds	r3, #24
 8005b86:	4619      	mov	r1, r3
 8005b88:	480e      	ldr	r0, [pc, #56]	; (8005bc4 <xTaskRemoveFromEventList+0xbc>)
 8005b8a:	f7fe faa2 	bl	80040d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <xTaskRemoveFromEventList+0xc0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d905      	bls.n	8005ba8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <xTaskRemoveFromEventList+0xc4>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e001      	b.n	8005bac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bac:	697b      	ldr	r3, [r7, #20]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000e8c 	.word	0x20000e8c
 8005bbc:	20000e6c 	.word	0x20000e6c
 8005bc0:	20000994 	.word	0x20000994
 8005bc4:	20000e24 	.word	0x20000e24
 8005bc8:	20000990 	.word	0x20000990
 8005bcc:	20000e78 	.word	0x20000e78

08005bd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <vTaskInternalSetTimeOutState+0x24>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <vTaskInternalSetTimeOutState+0x28>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	605a      	str	r2, [r3, #4]
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20000e7c 	.word	0x20000e7c
 8005bf8:	20000e68 	.word	0x20000e68

08005bfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	613b      	str	r3, [r7, #16]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	60fb      	str	r3, [r7, #12]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c3e:	f000 ff81 	bl	8006b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c42:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <xTaskCheckForTimeOut+0xbc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d102      	bne.n	8005c62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e023      	b.n	8005caa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <xTaskCheckForTimeOut+0xc0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d007      	beq.n	8005c7e <xTaskCheckForTimeOut+0x82>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d302      	bcc.n	8005c7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	e015      	b.n	8005caa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d20b      	bcs.n	8005ca0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff9b 	bl	8005bd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e004      	b.n	8005caa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005caa:	f000 ff7b 	bl	8006ba4 <vPortExitCritical>

	return xReturn;
 8005cae:	69fb      	ldr	r3, [r7, #28]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000e68 	.word	0x20000e68
 8005cbc:	20000e7c 	.word	0x20000e7c

08005cc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <vTaskMissedYield+0x14>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000e78 	.word	0x20000e78

08005cd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ce0:	f000 f852 	bl	8005d88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <prvIdleTask+0x28>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d9f9      	bls.n	8005ce0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <prvIdleTask+0x2c>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cfc:	e7f0      	b.n	8005ce0 <prvIdleTask+0x8>
 8005cfe:	bf00      	nop
 8005d00:	20000994 	.word	0x20000994
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d0e:	2300      	movs	r3, #0
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e00c      	b.n	8005d2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <prvInitialiseTaskLists+0x60>)
 8005d20:	4413      	add	r3, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe f9a8 	bl	8004078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b37      	cmp	r3, #55	; 0x37
 8005d32:	d9ef      	bls.n	8005d14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d34:	480d      	ldr	r0, [pc, #52]	; (8005d6c <prvInitialiseTaskLists+0x64>)
 8005d36:	f7fe f99f 	bl	8004078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d3a:	480d      	ldr	r0, [pc, #52]	; (8005d70 <prvInitialiseTaskLists+0x68>)
 8005d3c:	f7fe f99c 	bl	8004078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d40:	480c      	ldr	r0, [pc, #48]	; (8005d74 <prvInitialiseTaskLists+0x6c>)
 8005d42:	f7fe f999 	bl	8004078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d46:	480c      	ldr	r0, [pc, #48]	; (8005d78 <prvInitialiseTaskLists+0x70>)
 8005d48:	f7fe f996 	bl	8004078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d4c:	480b      	ldr	r0, [pc, #44]	; (8005d7c <prvInitialiseTaskLists+0x74>)
 8005d4e:	f7fe f993 	bl	8004078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <prvInitialiseTaskLists+0x78>)
 8005d54:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <prvInitialiseTaskLists+0x64>)
 8005d56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvInitialiseTaskLists+0x7c>)
 8005d5a:	4a05      	ldr	r2, [pc, #20]	; (8005d70 <prvInitialiseTaskLists+0x68>)
 8005d5c:	601a      	str	r2, [r3, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000994 	.word	0x20000994
 8005d6c:	20000df4 	.word	0x20000df4
 8005d70:	20000e08 	.word	0x20000e08
 8005d74:	20000e24 	.word	0x20000e24
 8005d78:	20000e38 	.word	0x20000e38
 8005d7c:	20000e50 	.word	0x20000e50
 8005d80:	20000e1c 	.word	0x20000e1c
 8005d84:	20000e20 	.word	0x20000e20

08005d88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d8e:	e019      	b.n	8005dc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d90:	f000 fed8 	bl	8006b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d94:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <prvCheckTasksWaitingTermination+0x50>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fe f9f3 	bl	800418c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005da6:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <prvCheckTasksWaitingTermination+0x54>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <prvCheckTasksWaitingTermination+0x54>)
 8005dae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvCheckTasksWaitingTermination+0x58>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <prvCheckTasksWaitingTermination+0x58>)
 8005db8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dba:	f000 fef3 	bl	8006ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f810 	bl	8005de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <prvCheckTasksWaitingTermination+0x58>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e1      	bne.n	8005d90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000e38 	.word	0x20000e38
 8005ddc:	20000e64 	.word	0x20000e64
 8005de0:	20000e4c 	.word	0x20000e4c

08005de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3354      	adds	r3, #84	; 0x54
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fa97 	bl	8007324 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d108      	bne.n	8005e12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 f88b 	bl	8006f20 <vPortFree>
				vPortFree( pxTCB );
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f888 	bl	8006f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e10:	e018      	b.n	8005e44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d103      	bne.n	8005e24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 f87f 	bl	8006f20 <vPortFree>
	}
 8005e22:	e00f      	b.n	8005e44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d00a      	beq.n	8005e44 <prvDeleteTCB+0x60>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <prvDeleteTCB+0x5e>
	}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <prvResetNextTaskUnblockTime+0x38>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <prvResetNextTaskUnblockTime+0x3c>)
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e64:	e008      	b.n	8005e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <prvResetNextTaskUnblockTime+0x38>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <prvResetNextTaskUnblockTime+0x3c>)
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20000e1c 	.word	0x20000e1c
 8005e88:	20000e84 	.word	0x20000e84

08005e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <xTaskGetSchedulerState+0x34>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	e008      	b.n	8005eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea0:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <xTaskGetSchedulerState+0x38>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	e001      	b.n	8005eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005eb2:	687b      	ldr	r3, [r7, #4]
	}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000e70 	.word	0x20000e70
 8005ec4:	20000e8c 	.word	0x20000e8c

08005ec8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d051      	beq.n	8005f82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <xTaskPriorityInherit+0xc4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d241      	bcs.n	8005f70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db06      	blt.n	8005f02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <xTaskPriorityInherit+0xc4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <xTaskPriorityInherit+0xc8>)
 8005f14:	4413      	add	r3, r2
 8005f16:	4299      	cmp	r1, r3
 8005f18:	d122      	bne.n	8005f60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe f934 	bl	800418c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f24:	4b19      	ldr	r3, [pc, #100]	; (8005f8c <xTaskPriorityInherit+0xc4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f32:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <xTaskPriorityInherit+0xcc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d903      	bls.n	8005f42 <xTaskPriorityInherit+0x7a>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <xTaskPriorityInherit+0xcc>)
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4a10      	ldr	r2, [pc, #64]	; (8005f90 <xTaskPriorityInherit+0xc8>)
 8005f50:	441a      	add	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f7fe f8ba 	bl	80040d2 <vListInsertEnd>
 8005f5e:	e004      	b.n	8005f6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <xTaskPriorityInherit+0xc4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e008      	b.n	8005f82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <xTaskPriorityInherit+0xc4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d201      	bcs.n	8005f82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f82:	68fb      	ldr	r3, [r7, #12]
	}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000990 	.word	0x20000990
 8005f90:	20000994 	.word	0x20000994
 8005f94:	20000e6c 	.word	0x20000e6c

08005f98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d056      	beq.n	800605c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fae:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <xTaskPriorityDisinherit+0xd0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d00a      	beq.n	8005fce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60bb      	str	r3, [r7, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	1e5a      	subs	r2, r3, #1
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d02c      	beq.n	800605c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	2b00      	cmp	r3, #0
 8006008:	d128      	bne.n	800605c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3304      	adds	r3, #4
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe f8bc 	bl	800418c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <xTaskPriorityDisinherit+0xd4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d903      	bls.n	800603c <xTaskPriorityDisinherit+0xa4>
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	4a0c      	ldr	r2, [pc, #48]	; (800606c <xTaskPriorityDisinherit+0xd4>)
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4a09      	ldr	r2, [pc, #36]	; (8006070 <xTaskPriorityDisinherit+0xd8>)
 800604a:	441a      	add	r2, r3
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f7fe f83d 	bl	80040d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800605c:	697b      	ldr	r3, [r7, #20]
	}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000990 	.word	0x20000990
 800606c:	20000e6c 	.word	0x20000e6c
 8006070:	20000994 	.word	0x20000994

08006074 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006082:	2301      	movs	r3, #1
 8006084:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d06a      	beq.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d902      	bls.n	80060ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e002      	b.n	80060c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d04b      	beq.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d146      	bne.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d10a      	bne.n	80060f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60bb      	str	r3, [r7, #8]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	db04      	blt.n	8006112 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	6959      	ldr	r1, [r3, #20]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a13      	ldr	r2, [pc, #76]	; (8006170 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006122:	4413      	add	r3, r2
 8006124:	4299      	cmp	r1, r3
 8006126:	d11c      	bne.n	8006162 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	3304      	adds	r3, #4
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe f82d 	bl	800418c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d903      	bls.n	8006146 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4a07      	ldr	r2, [pc, #28]	; (8006170 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006154:	441a      	add	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7fd ffb8 	bl	80040d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006162:	bf00      	nop
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000990 	.word	0x20000990
 8006170:	20000994 	.word	0x20000994
 8006174:	20000e6c 	.word	0x20000e6c

08006178 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800617c:	4b07      	ldr	r3, [pc, #28]	; (800619c <pvTaskIncrementMutexHeldCount+0x24>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <pvTaskIncrementMutexHeldCount+0x24>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800618a:	3201      	adds	r2, #1
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <pvTaskIncrementMutexHeldCount+0x24>)
 8006190:	681b      	ldr	r3, [r3, #0]
	}
 8006192:	4618      	mov	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000990 	.word	0x20000990

080061a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061aa:	4b21      	ldr	r3, [pc, #132]	; (8006230 <prvAddCurrentTaskToDelayedList+0x90>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b0:	4b20      	ldr	r3, [pc, #128]	; (8006234 <prvAddCurrentTaskToDelayedList+0x94>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fd ffe8 	bl	800418c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d10a      	bne.n	80061da <prvAddCurrentTaskToDelayedList+0x3a>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ca:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <prvAddCurrentTaskToDelayedList+0x94>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4819      	ldr	r0, [pc, #100]	; (8006238 <prvAddCurrentTaskToDelayedList+0x98>)
 80061d4:	f7fd ff7d 	bl	80040d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061d8:	e026      	b.n	8006228 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4413      	add	r3, r2
 80061e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061e2:	4b14      	ldr	r3, [pc, #80]	; (8006234 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d209      	bcs.n	8006206 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <prvAddCurrentTaskToDelayedList+0x9c>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b0f      	ldr	r3, [pc, #60]	; (8006234 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f7fd ff8b 	bl	800411a <vListInsert>
}
 8006204:	e010      	b.n	8006228 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <prvAddCurrentTaskToDelayedList+0x94>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fd ff81 	bl	800411a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <prvAddCurrentTaskToDelayedList+0xa4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d202      	bcs.n	8006228 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006222:	4a08      	ldr	r2, [pc, #32]	; (8006244 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6013      	str	r3, [r2, #0]
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000e68 	.word	0x20000e68
 8006234:	20000990 	.word	0x20000990
 8006238:	20000e50 	.word	0x20000e50
 800623c:	20000e20 	.word	0x20000e20
 8006240:	20000e1c 	.word	0x20000e1c
 8006244:	20000e84 	.word	0x20000e84

08006248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006252:	f000 fb07 	bl	8006864 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <xTimerCreateTimerTask+0x80>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d021      	beq.n	80062a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006266:	1d3a      	adds	r2, r7, #4
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	4618      	mov	r0, r3
 8006272:	f7fd fee7 	bl	8004044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	9202      	str	r2, [sp, #8]
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	2302      	movs	r3, #2
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	460a      	mov	r2, r1
 8006288:	4910      	ldr	r1, [pc, #64]	; (80062cc <xTimerCreateTimerTask+0x84>)
 800628a:	4811      	ldr	r0, [pc, #68]	; (80062d0 <xTimerCreateTimerTask+0x88>)
 800628c:	f7fe ffb6 	bl	80051fc <xTaskCreateStatic>
 8006290:	4603      	mov	r3, r0
 8006292:	4a10      	ldr	r2, [pc, #64]	; (80062d4 <xTimerCreateTimerTask+0x8c>)
 8006294:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <xTimerCreateTimerTask+0x8c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800629e:	2301      	movs	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	613b      	str	r3, [r7, #16]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062be:	697b      	ldr	r3, [r7, #20]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000ec0 	.word	0x20000ec0
 80062cc:	08007bc4 	.word	0x08007bc4
 80062d0:	0800640d 	.word	0x0800640d
 80062d4:	20000ec4 	.word	0x20000ec4

080062d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	; 0x28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xTimerGenericCommand+0x2e>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	623b      	str	r3, [r7, #32]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <xTimerGenericCommand+0x98>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02a      	beq.n	8006364 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b05      	cmp	r3, #5
 800631e:	dc18      	bgt.n	8006352 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006320:	f7ff fdb4 	bl	8005e8c <xTaskGetSchedulerState>
 8006324:	4603      	mov	r3, r0
 8006326:	2b02      	cmp	r3, #2
 8006328:	d109      	bne.n	800633e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <xTimerGenericCommand+0x98>)
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f107 0110 	add.w	r1, r7, #16
 8006332:	2300      	movs	r3, #0
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	f7fe f8fb 	bl	8004530 <xQueueGenericSend>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24
 800633c:	e012      	b.n	8006364 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800633e:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <xTimerGenericCommand+0x98>)
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f107 0110 	add.w	r1, r7, #16
 8006346:	2300      	movs	r3, #0
 8006348:	2200      	movs	r2, #0
 800634a:	f7fe f8f1 	bl	8004530 <xQueueGenericSend>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24
 8006350:	e008      	b.n	8006364 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <xTimerGenericCommand+0x98>)
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f107 0110 	add.w	r1, r7, #16
 800635a:	2300      	movs	r3, #0
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	f7fe f9e5 	bl	800472c <xQueueGenericSendFromISR>
 8006362:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006366:	4618      	mov	r0, r3
 8006368:	3728      	adds	r7, #40	; 0x28
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000ec0 	.word	0x20000ec0

08006374 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af02      	add	r7, sp, #8
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637e:	4b22      	ldr	r3, [pc, #136]	; (8006408 <prvProcessExpiredTimer+0x94>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3304      	adds	r3, #4
 800638c:	4618      	mov	r0, r3
 800638e:	f7fd fefd 	bl	800418c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d022      	beq.n	80063e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	18d1      	adds	r1, r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f000 f8d1 	bl	8006554 <prvInsertTimerInActiveList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01f      	beq.n	80063f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f7ff ff88 	bl	80062d8 <xTimerGenericCommand>
 80063c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d113      	bne.n	80063f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	4798      	blx	r3
}
 8006400:	bf00      	nop
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000eb8 	.word	0x20000eb8

0800640c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f857 	bl	80064cc <prvGetNextExpireTime>
 800641e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4619      	mov	r1, r3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f803 	bl	8006430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800642a:	f000 f8d5 	bl	80065d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800642e:	e7f1      	b.n	8006414 <prvTimerTask+0x8>

08006430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800643a:	f7ff f93b 	bl	80056b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800643e:	f107 0308 	add.w	r3, r7, #8
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f866 	bl	8006514 <prvSampleTimeNow>
 8006448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d130      	bne.n	80064b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <prvProcessTimerOrBlockTask+0x3c>
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d806      	bhi.n	800646c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800645e:	f7ff f937 	bl	80056d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ff85 	bl	8006374 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800646a:	e024      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <prvProcessTimerOrBlockTask+0x90>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <prvProcessTimerOrBlockTask+0x50>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <prvProcessTimerOrBlockTask+0x52>
 8006480:	2300      	movs	r3, #0
 8006482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <prvProcessTimerOrBlockTask+0x94>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	f7fe fe7f 	bl	8005194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006496:	f7ff f91b 	bl	80056d0 <xTaskResumeAll>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <prvProcessTimerOrBlockTask+0x98>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
}
 80064b0:	e001      	b.n	80064b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064b2:	f7ff f90d 	bl	80056d0 <xTaskResumeAll>
}
 80064b6:	bf00      	nop
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000ebc 	.word	0x20000ebc
 80064c4:	20000ec0 	.word	0x20000ec0
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064d4:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <prvGetNextExpireTime+0x44>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <prvGetNextExpireTime+0x16>
 80064de:	2201      	movs	r2, #1
 80064e0:	e000      	b.n	80064e4 <prvGetNextExpireTime+0x18>
 80064e2:	2200      	movs	r2, #0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvGetNextExpireTime+0x44>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e001      	b.n	8006500 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000eb8 	.word	0x20000eb8

08006514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800651c:	f7ff f976 	bl	800580c <xTaskGetTickCount>
 8006520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <prvSampleTimeNow+0x3c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	429a      	cmp	r2, r3
 800652a:	d205      	bcs.n	8006538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800652c:	f000 f936 	bl	800679c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e002      	b.n	800653e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800653e:	4a04      	ldr	r2, [pc, #16]	; (8006550 <prvSampleTimeNow+0x3c>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000ec8 	.word	0x20000ec8

08006554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d812      	bhi.n	80065a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d302      	bcc.n	800658e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e01b      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <prvInsertTimerInActiveList+0x7c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fd fdbe 	bl	800411a <vListInsert>
 800659e:	e012      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d206      	bcs.n	80065b6 <prvInsertTimerInActiveList+0x62>
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e007      	b.n	80065c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvInsertTimerInActiveList+0x80>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fd fdaa 	bl	800411a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065c6:	697b      	ldr	r3, [r7, #20]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000ebc 	.word	0x20000ebc
 80065d4:	20000eb8 	.word	0x20000eb8

080065d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	; 0x38
 80065dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065de:	e0ca      	b.n	8006776 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da18      	bge.n	8006618 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	3304      	adds	r3, #4
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	61fb      	str	r3, [r7, #28]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800660e:	6850      	ldr	r0, [r2, #4]
 8006610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006612:	6892      	ldr	r2, [r2, #8]
 8006614:	4611      	mov	r1, r2
 8006616:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f2c0 80aa 	blt.w	8006774 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	3304      	adds	r3, #4
 8006630:	4618      	mov	r0, r3
 8006632:	f7fd fdab 	bl	800418c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006636:	463b      	mov	r3, r7
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff ff6b 	bl	8006514 <prvSampleTimeNow>
 800663e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b09      	cmp	r3, #9
 8006644:	f200 8097 	bhi.w	8006776 <prvProcessReceivedCommands+0x19e>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <prvProcessReceivedCommands+0x78>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006679 	.word	0x08006679
 8006654:	08006679 	.word	0x08006679
 8006658:	08006679 	.word	0x08006679
 800665c:	080066ed 	.word	0x080066ed
 8006660:	08006701 	.word	0x08006701
 8006664:	0800674b 	.word	0x0800674b
 8006668:	08006679 	.word	0x08006679
 800666c:	08006679 	.word	0x08006679
 8006670:	080066ed 	.word	0x080066ed
 8006674:	08006701 	.word	0x08006701
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	b2da      	uxtb	r2, r3
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	18d1      	adds	r1, r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006698:	f7ff ff5c 	bl	8006554 <prvInsertTimerInActiveList>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d069      	beq.n	8006776 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05e      	beq.n	8006776 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	441a      	add	r2, r3
 80066c0:	2300      	movs	r3, #0
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	2100      	movs	r1, #0
 80066c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ca:	f7ff fe05 	bl	80062d8 <xTimerGenericCommand>
 80066ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d14f      	bne.n	8006776 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	61bb      	str	r3, [r7, #24]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066fe:	e03a      	b.n	8006776 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	617b      	str	r3, [r7, #20]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	18d1      	adds	r1, r2, r3
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006744:	f7ff ff06 	bl	8006554 <prvInsertTimerInActiveList>
					break;
 8006748:	e015      	b.n	8006776 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675a:	f000 fbe1 	bl	8006f20 <vPortFree>
 800675e:	e00a      	b.n	8006776 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006772:	e000      	b.n	8006776 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006774:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <prvProcessReceivedCommands+0x1c0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	1d39      	adds	r1, r7, #4
 800677c:	2200      	movs	r2, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe f8fc 	bl	800497c <xQueueReceive>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	f47f af2a 	bne.w	80065e0 <prvProcessReceivedCommands+0x8>
	}
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	3730      	adds	r7, #48	; 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000ec0 	.word	0x20000ec0

0800679c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067a2:	e048      	b.n	8006836 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067a4:	4b2d      	ldr	r3, [pc, #180]	; (800685c <prvSwitchTimerLists+0xc0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ae:	4b2b      	ldr	r3, [pc, #172]	; (800685c <prvSwitchTimerLists+0xc0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fd fce5 	bl	800418c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02e      	beq.n	8006836 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d90e      	bls.n	8006808 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <prvSwitchTimerLists+0xc0>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7fd fc8a 	bl	800411a <vListInsert>
 8006806:	e016      	b.n	8006836 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006808:	2300      	movs	r3, #0
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	2300      	movs	r3, #0
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	2100      	movs	r1, #0
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff fd60 	bl	80062d8 <xTimerGenericCommand>
 8006818:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	603b      	str	r3, [r7, #0]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <prvSwitchTimerLists+0xc0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1b1      	bne.n	80067a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <prvSwitchTimerLists+0xc0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <prvSwitchTimerLists+0xc4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a04      	ldr	r2, [pc, #16]	; (800685c <prvSwitchTimerLists+0xc0>)
 800684c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800684e:	4a04      	ldr	r2, [pc, #16]	; (8006860 <prvSwitchTimerLists+0xc4>)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000eb8 	.word	0x20000eb8
 8006860:	20000ebc 	.word	0x20000ebc

08006864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800686a:	f000 f96b 	bl	8006b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d120      	bne.n	80068b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006876:	4814      	ldr	r0, [pc, #80]	; (80068c8 <prvCheckForValidListAndQueue+0x64>)
 8006878:	f7fd fbfe 	bl	8004078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800687c:	4813      	ldr	r0, [pc, #76]	; (80068cc <prvCheckForValidListAndQueue+0x68>)
 800687e:	f7fd fbfb 	bl	8004078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <prvCheckForValidListAndQueue+0x6c>)
 8006884:	4a10      	ldr	r2, [pc, #64]	; (80068c8 <prvCheckForValidListAndQueue+0x64>)
 8006886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <prvCheckForValidListAndQueue+0x70>)
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <prvCheckForValidListAndQueue+0x68>)
 800688c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <prvCheckForValidListAndQueue+0x74>)
 8006894:	4a11      	ldr	r2, [pc, #68]	; (80068dc <prvCheckForValidListAndQueue+0x78>)
 8006896:	2110      	movs	r1, #16
 8006898:	200a      	movs	r0, #10
 800689a:	f7fd fd09 	bl	80042b0 <xQueueGenericCreateStatic>
 800689e:	4603      	mov	r3, r0
 80068a0:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 80068a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	490b      	ldr	r1, [pc, #44]	; (80068e0 <prvCheckForValidListAndQueue+0x7c>)
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fc1a 	bl	80050ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068b8:	f000 f974 	bl	8006ba4 <vPortExitCritical>
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000ec0 	.word	0x20000ec0
 80068c8:	20000e90 	.word	0x20000e90
 80068cc:	20000ea4 	.word	0x20000ea4
 80068d0:	20000eb8 	.word	0x20000eb8
 80068d4:	20000ebc 	.word	0x20000ebc
 80068d8:	20000f6c 	.word	0x20000f6c
 80068dc:	20000ecc 	.word	0x20000ecc
 80068e0:	08007bcc 	.word	0x08007bcc

080068e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b04      	subs	r3, #4
 80068f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3b04      	subs	r3, #4
 8006902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0201 	bic.w	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3b04      	subs	r3, #4
 8006912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006914:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <pxPortInitialiseStack+0x64>)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b14      	subs	r3, #20
 800691e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b04      	subs	r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f06f 0202 	mvn.w	r2, #2
 8006932:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3b20      	subs	r3, #32
 8006938:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	0800694d 	.word	0x0800694d

0800694c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <prvTaskExitError+0x54>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d00a      	beq.n	8006976 <prvTaskExitError+0x2a>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	60fb      	str	r3, [r7, #12]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <prvTaskExitError+0x28>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60bb      	str	r3, [r7, #8]
}
 8006988:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800698a:	bf00      	nop
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0fc      	beq.n	800698c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	2000000c 	.word	0x2000000c
	...

080069b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <pxCurrentTCBConst2>)
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	f380 8809 	msr	PSP, r0
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f380 8811 	msr	BASEPRI, r0
 80069ca:	4770      	bx	lr
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst2>:
 80069d0:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069d8:	4808      	ldr	r0, [pc, #32]	; (80069fc <prvPortStartFirstTask+0x24>)
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f380 8808 	msr	MSP, r0
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f380 8814 	msr	CONTROL, r0
 80069ea:	b662      	cpsie	i
 80069ec:	b661      	cpsie	f
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	df00      	svc	0
 80069f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069fa:	bf00      	nop
 80069fc:	e000ed08 	.word	0xe000ed08

08006a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a06:	4b46      	ldr	r3, [pc, #280]	; (8006b20 <xPortStartScheduler+0x120>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a46      	ldr	r2, [pc, #280]	; (8006b24 <xPortStartScheduler+0x124>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10a      	bne.n	8006a26 <xPortStartScheduler+0x26>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	613b      	str	r3, [r7, #16]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a26:	4b3e      	ldr	r3, [pc, #248]	; (8006b20 <xPortStartScheduler+0x120>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3f      	ldr	r2, [pc, #252]	; (8006b28 <xPortStartScheduler+0x128>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10a      	bne.n	8006a46 <xPortStartScheduler+0x46>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a46:	4b39      	ldr	r3, [pc, #228]	; (8006b2c <xPortStartScheduler+0x12c>)
 8006a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	22ff      	movs	r2, #255	; 0xff
 8006a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <xPortStartScheduler+0x130>)
 8006a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a6e:	4b31      	ldr	r3, [pc, #196]	; (8006b34 <xPortStartScheduler+0x134>)
 8006a70:	2207      	movs	r2, #7
 8006a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a74:	e009      	b.n	8006a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a76:	4b2f      	ldr	r3, [pc, #188]	; (8006b34 <xPortStartScheduler+0x134>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	4a2d      	ldr	r2, [pc, #180]	; (8006b34 <xPortStartScheduler+0x134>)
 8006a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d0ef      	beq.n	8006a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a96:	4b27      	ldr	r3, [pc, #156]	; (8006b34 <xPortStartScheduler+0x134>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1c3 0307 	rsb	r3, r3, #7
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d00a      	beq.n	8006ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60bb      	str	r3, [r7, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ab8:	4b1e      	ldr	r3, [pc, #120]	; (8006b34 <xPortStartScheduler+0x134>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <xPortStartScheduler+0x134>)
 8006ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <xPortStartScheduler+0x134>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aca:	4a1a      	ldr	r2, [pc, #104]	; (8006b34 <xPortStartScheduler+0x134>)
 8006acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ad6:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <xPortStartScheduler+0x138>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <xPortStartScheduler+0x138>)
 8006adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <xPortStartScheduler+0x138>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a14      	ldr	r2, [pc, #80]	; (8006b38 <xPortStartScheduler+0x138>)
 8006ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aee:	f000 f8dd 	bl	8006cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006af2:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <xPortStartScheduler+0x13c>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006af8:	f000 f8fc 	bl	8006cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006afc:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <xPortStartScheduler+0x140>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0f      	ldr	r2, [pc, #60]	; (8006b40 <xPortStartScheduler+0x140>)
 8006b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b08:	f7ff ff66 	bl	80069d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b0c:	f7fe ff48 	bl	80059a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b10:	f7ff ff1c 	bl	800694c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	e000ed00 	.word	0xe000ed00
 8006b24:	410fc271 	.word	0x410fc271
 8006b28:	410fc270 	.word	0x410fc270
 8006b2c:	e000e400 	.word	0xe000e400
 8006b30:	20000fbc 	.word	0x20000fbc
 8006b34:	20000fc0 	.word	0x20000fc0
 8006b38:	e000ed20 	.word	0xe000ed20
 8006b3c:	2000000c 	.word	0x2000000c
 8006b40:	e000ef34 	.word	0xe000ef34

08006b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	607b      	str	r3, [r7, #4]
}
 8006b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <vPortEnterCritical+0x58>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <vPortEnterCritical+0x58>)
 8006b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b68:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <vPortEnterCritical+0x58>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d10f      	bne.n	8006b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <vPortEnterCritical+0x5c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	603b      	str	r3, [r7, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <vPortEnterCritical+0x4a>
	}
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	2000000c 	.word	0x2000000c
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <vPortExitCritical+0x50>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <vPortExitCritical+0x24>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	607b      	str	r3, [r7, #4]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <vPortExitCritical+0x50>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <vPortExitCritical+0x50>)
 8006bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bd2:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <vPortExitCritical+0x50>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d105      	bne.n	8006be6 <vPortExitCritical+0x42>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f383 8811 	msr	BASEPRI, r3
}
 8006be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c
	...

08006c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c00:	f3ef 8009 	mrs	r0, PSP
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	4b15      	ldr	r3, [pc, #84]	; (8006c60 <pxCurrentTCBConst>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	f01e 0f10 	tst.w	lr, #16
 8006c10:	bf08      	it	eq
 8006c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1a:	6010      	str	r0, [r2, #0]
 8006c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c24:	f380 8811 	msr	BASEPRI, r0
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f7fe feb6 	bl	80059a0 <vTaskSwitchContext>
 8006c34:	f04f 0000 	mov.w	r0, #0
 8006c38:	f380 8811 	msr	BASEPRI, r0
 8006c3c:	bc09      	pop	{r0, r3}
 8006c3e:	6819      	ldr	r1, [r3, #0]
 8006c40:	6808      	ldr	r0, [r1, #0]
 8006c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c46:	f01e 0f10 	tst.w	lr, #16
 8006c4a:	bf08      	it	eq
 8006c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c50:	f380 8809 	msr	PSP, r0
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst>:
 8006c60:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
}
 8006c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c82:	f7fe fdd3 	bl	800582c <xTaskIncrementTick>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <xPortSysTickHandler+0x40>)
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
}
 8006c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <vPortSetupTimerInterrupt+0x34>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <vPortSetupTimerInterrupt+0x38>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <vPortSetupTimerInterrupt+0x3c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <vPortSetupTimerInterrupt+0x40>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <vPortSetupTimerInterrupt+0x44>)
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cce:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <vPortSetupTimerInterrupt+0x34>)
 8006cd0:	2207      	movs	r2, #7
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	e000e010 	.word	0xe000e010
 8006ce4:	e000e018 	.word	0xe000e018
 8006ce8:	20000000 	.word	0x20000000
 8006cec:	10624dd3 	.word	0x10624dd3
 8006cf0:	e000e014 	.word	0xe000e014

08006cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d04 <vPortEnableVFP+0x10>
 8006cf8:	6801      	ldr	r1, [r0, #0]
 8006cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cfe:	6001      	str	r1, [r0, #0]
 8006d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d02:	bf00      	nop
 8006d04:	e000ed88 	.word	0xe000ed88

08006d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d0e:	f3ef 8305 	mrs	r3, IPSR
 8006d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d914      	bls.n	8006d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <vPortValidateInterruptPriority+0x70>)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d24:	4b15      	ldr	r3, [pc, #84]	; (8006d7c <vPortValidateInterruptPriority+0x74>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	7afa      	ldrb	r2, [r7, #11]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d20a      	bcs.n	8006d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	607b      	str	r3, [r7, #4]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d44:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <vPortValidateInterruptPriority+0x78>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <vPortValidateInterruptPriority+0x7c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d90a      	bls.n	8006d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	603b      	str	r3, [r7, #0]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <vPortValidateInterruptPriority+0x60>
	}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	e000e3f0 	.word	0xe000e3f0
 8006d7c:	20000fbc 	.word	0x20000fbc
 8006d80:	e000ed0c 	.word	0xe000ed0c
 8006d84:	20000fc0 	.word	0x20000fc0

08006d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d94:	f7fe fc8e 	bl	80056b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d98:	4b5b      	ldr	r3, [pc, #364]	; (8006f08 <pvPortMalloc+0x180>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006da0:	f000 f920 	bl	8006fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006da4:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <pvPortMalloc+0x184>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8093 	bne.w	8006ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01d      	beq.n	8006df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006db8:	2208      	movs	r2, #8
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d014      	beq.n	8006df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f023 0307 	bic.w	r3, r3, #7
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <pvPortMalloc+0x6c>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	617b      	str	r3, [r7, #20]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d06e      	beq.n	8006ed8 <pvPortMalloc+0x150>
 8006dfa:	4b45      	ldr	r3, [pc, #276]	; (8006f10 <pvPortMalloc+0x188>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d869      	bhi.n	8006ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e04:	4b43      	ldr	r3, [pc, #268]	; (8006f14 <pvPortMalloc+0x18c>)
 8006e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e08:	4b42      	ldr	r3, [pc, #264]	; (8006f14 <pvPortMalloc+0x18c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e0e:	e004      	b.n	8006e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d903      	bls.n	8006e2c <pvPortMalloc+0xa4>
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f1      	bne.n	8006e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e2c:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <pvPortMalloc+0x180>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d050      	beq.n	8006ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	4413      	add	r3, r2
 8006e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	2308      	movs	r3, #8
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d91f      	bls.n	8006e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <pvPortMalloc+0xf8>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	613b      	str	r3, [r7, #16]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e92:	69b8      	ldr	r0, [r7, #24]
 8006e94:	f000 f908 	bl	80070a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e98:	4b1d      	ldr	r3, [pc, #116]	; (8006f10 <pvPortMalloc+0x188>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <pvPortMalloc+0x188>)
 8006ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <pvPortMalloc+0x188>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <pvPortMalloc+0x190>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d203      	bcs.n	8006eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eb2:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <pvPortMalloc+0x188>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <pvPortMalloc+0x190>)
 8006eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <pvPortMalloc+0x184>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ece:	4b13      	ldr	r3, [pc, #76]	; (8006f1c <pvPortMalloc+0x194>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <pvPortMalloc+0x194>)
 8006ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ed8:	f7fe fbfa 	bl	80056d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <pvPortMalloc+0x174>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	60fb      	str	r3, [r7, #12]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <pvPortMalloc+0x172>
	return pvReturn;
 8006efc:	69fb      	ldr	r3, [r7, #28]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3728      	adds	r7, #40	; 0x28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20004bcc 	.word	0x20004bcc
 8006f0c:	20004be0 	.word	0x20004be0
 8006f10:	20004bd0 	.word	0x20004bd0
 8006f14:	20004bc4 	.word	0x20004bc4
 8006f18:	20004bd4 	.word	0x20004bd4
 8006f1c:	20004bd8 	.word	0x20004bd8

08006f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d04d      	beq.n	8006fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f32:	2308      	movs	r3, #8
 8006f34:	425b      	negs	r3, r3
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4413      	add	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <vPortFree+0xb8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <vPortFree+0x44>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <vPortFree+0x62>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60bb      	str	r3, [r7, #8]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <vPortFree+0xb8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01e      	beq.n	8006fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11a      	bne.n	8006fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <vPortFree+0xb8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	401a      	ands	r2, r3
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fa8:	f7fe fb84 	bl	80056b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <vPortFree+0xbc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <vPortFree+0xbc>)
 8006fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fba:	6938      	ldr	r0, [r7, #16]
 8006fbc:	f000 f874 	bl	80070a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <vPortFree+0xc0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <vPortFree+0xc0>)
 8006fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fca:	f7fe fb81 	bl	80056d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fce:	bf00      	nop
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20004be0 	.word	0x20004be0
 8006fdc:	20004bd0 	.word	0x20004bd0
 8006fe0:	20004bdc 	.word	0x20004bdc

08006fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ff0:	4b27      	ldr	r3, [pc, #156]	; (8007090 <prvHeapInit+0xac>)
 8006ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3307      	adds	r3, #7
 8007002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0307 	bic.w	r3, r3, #7
 800700a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <prvHeapInit+0xac>)
 8007014:	4413      	add	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <prvHeapInit+0xb0>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007022:	4b1c      	ldr	r3, [pc, #112]	; (8007094 <prvHeapInit+0xb0>)
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	4413      	add	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007030:	2208      	movs	r2, #8
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0307 	bic.w	r3, r3, #7
 800703e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a15      	ldr	r2, [pc, #84]	; (8007098 <prvHeapInit+0xb4>)
 8007044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007046:	4b14      	ldr	r3, [pc, #80]	; (8007098 <prvHeapInit+0xb4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800704e:	4b12      	ldr	r3, [pc, #72]	; (8007098 <prvHeapInit+0xb4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <prvHeapInit+0xb4>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <prvHeapInit+0xb8>)
 8007072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <prvHeapInit+0xbc>)
 800707a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <prvHeapInit+0xc0>)
 800707e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000fc4 	.word	0x20000fc4
 8007094:	20004bc4 	.word	0x20004bc4
 8007098:	20004bcc 	.word	0x20004bcc
 800709c:	20004bd4 	.word	0x20004bd4
 80070a0:	20004bd0 	.word	0x20004bd0
 80070a4:	20004be0 	.word	0x20004be0

080070a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070b0:	4b28      	ldr	r3, [pc, #160]	; (8007154 <prvInsertBlockIntoFreeList+0xac>)
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e002      	b.n	80070bc <prvInsertBlockIntoFreeList+0x14>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d8f7      	bhi.n	80070b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4413      	add	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d108      	bne.n	80070ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	441a      	add	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	441a      	add	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d118      	bne.n	8007130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <prvInsertBlockIntoFreeList+0xb0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d00d      	beq.n	8007126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e008      	b.n	8007138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvInsertBlockIntoFreeList+0xb0>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	e003      	b.n	8007138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d002      	beq.n	8007146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007146:	bf00      	nop
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20004bc4 	.word	0x20004bc4
 8007158:	20004bcc 	.word	0x20004bcc

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000010 	.word	0x20000010

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	; (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	; (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	; (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	; (80071ac <__libc_init_array+0x44>)
 800717c:	f000 fcf8 	bl	8007b70 <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08007cd0 	.word	0x08007cd0
 80071a4:	08007cd0 	.word	0x08007cd0
 80071a8:	08007cd0 	.word	0x08007cd0
 80071ac:	08007cd4 	.word	0x08007cd4

080071b0 <__retarget_lock_acquire_recursive>:
 80071b0:	4770      	bx	lr

080071b2 <__retarget_lock_release_recursive>:
 80071b2:	4770      	bx	lr

080071b4 <memcpy>:
 80071b4:	440a      	add	r2, r1
 80071b6:	4291      	cmp	r1, r2
 80071b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071bc:	d100      	bne.n	80071c0 <memcpy+0xc>
 80071be:	4770      	bx	lr
 80071c0:	b510      	push	{r4, lr}
 80071c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ca:	4291      	cmp	r1, r2
 80071cc:	d1f9      	bne.n	80071c2 <memcpy+0xe>
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <memset>:
 80071d0:	4402      	add	r2, r0
 80071d2:	4603      	mov	r3, r0
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d100      	bne.n	80071da <memset+0xa>
 80071d8:	4770      	bx	lr
 80071da:	f803 1b01 	strb.w	r1, [r3], #1
 80071de:	e7f9      	b.n	80071d4 <memset+0x4>

080071e0 <sbrk_aligned>:
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	4e0e      	ldr	r6, [pc, #56]	; (800721c <sbrk_aligned+0x3c>)
 80071e4:	460c      	mov	r4, r1
 80071e6:	6831      	ldr	r1, [r6, #0]
 80071e8:	4605      	mov	r5, r0
 80071ea:	b911      	cbnz	r1, 80071f2 <sbrk_aligned+0x12>
 80071ec:	f000 f8f6 	bl	80073dc <_sbrk_r>
 80071f0:	6030      	str	r0, [r6, #0]
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f8f1 	bl	80073dc <_sbrk_r>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	d00a      	beq.n	8007214 <sbrk_aligned+0x34>
 80071fe:	1cc4      	adds	r4, r0, #3
 8007200:	f024 0403 	bic.w	r4, r4, #3
 8007204:	42a0      	cmp	r0, r4
 8007206:	d007      	beq.n	8007218 <sbrk_aligned+0x38>
 8007208:	1a21      	subs	r1, r4, r0
 800720a:	4628      	mov	r0, r5
 800720c:	f000 f8e6 	bl	80073dc <_sbrk_r>
 8007210:	3001      	adds	r0, #1
 8007212:	d101      	bne.n	8007218 <sbrk_aligned+0x38>
 8007214:	f04f 34ff 	mov.w	r4, #4294967295
 8007218:	4620      	mov	r0, r4
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	20004bec 	.word	0x20004bec

08007220 <_malloc_r>:
 8007220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007224:	1ccd      	adds	r5, r1, #3
 8007226:	f025 0503 	bic.w	r5, r5, #3
 800722a:	3508      	adds	r5, #8
 800722c:	2d0c      	cmp	r5, #12
 800722e:	bf38      	it	cc
 8007230:	250c      	movcc	r5, #12
 8007232:	2d00      	cmp	r5, #0
 8007234:	4607      	mov	r7, r0
 8007236:	db01      	blt.n	800723c <_malloc_r+0x1c>
 8007238:	42a9      	cmp	r1, r5
 800723a:	d905      	bls.n	8007248 <_malloc_r+0x28>
 800723c:	230c      	movs	r3, #12
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	2600      	movs	r6, #0
 8007242:	4630      	mov	r0, r6
 8007244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007248:	4e2e      	ldr	r6, [pc, #184]	; (8007304 <_malloc_r+0xe4>)
 800724a:	f000 f8f7 	bl	800743c <__malloc_lock>
 800724e:	6833      	ldr	r3, [r6, #0]
 8007250:	461c      	mov	r4, r3
 8007252:	bb34      	cbnz	r4, 80072a2 <_malloc_r+0x82>
 8007254:	4629      	mov	r1, r5
 8007256:	4638      	mov	r0, r7
 8007258:	f7ff ffc2 	bl	80071e0 <sbrk_aligned>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	4604      	mov	r4, r0
 8007260:	d14d      	bne.n	80072fe <_malloc_r+0xde>
 8007262:	6834      	ldr	r4, [r6, #0]
 8007264:	4626      	mov	r6, r4
 8007266:	2e00      	cmp	r6, #0
 8007268:	d140      	bne.n	80072ec <_malloc_r+0xcc>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	4631      	mov	r1, r6
 800726e:	4638      	mov	r0, r7
 8007270:	eb04 0803 	add.w	r8, r4, r3
 8007274:	f000 f8b2 	bl	80073dc <_sbrk_r>
 8007278:	4580      	cmp	r8, r0
 800727a:	d13a      	bne.n	80072f2 <_malloc_r+0xd2>
 800727c:	6821      	ldr	r1, [r4, #0]
 800727e:	3503      	adds	r5, #3
 8007280:	1a6d      	subs	r5, r5, r1
 8007282:	f025 0503 	bic.w	r5, r5, #3
 8007286:	3508      	adds	r5, #8
 8007288:	2d0c      	cmp	r5, #12
 800728a:	bf38      	it	cc
 800728c:	250c      	movcc	r5, #12
 800728e:	4629      	mov	r1, r5
 8007290:	4638      	mov	r0, r7
 8007292:	f7ff ffa5 	bl	80071e0 <sbrk_aligned>
 8007296:	3001      	adds	r0, #1
 8007298:	d02b      	beq.n	80072f2 <_malloc_r+0xd2>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	442b      	add	r3, r5
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	e00e      	b.n	80072c0 <_malloc_r+0xa0>
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	1b52      	subs	r2, r2, r5
 80072a6:	d41e      	bmi.n	80072e6 <_malloc_r+0xc6>
 80072a8:	2a0b      	cmp	r2, #11
 80072aa:	d916      	bls.n	80072da <_malloc_r+0xba>
 80072ac:	1961      	adds	r1, r4, r5
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	6025      	str	r5, [r4, #0]
 80072b2:	bf18      	it	ne
 80072b4:	6059      	strne	r1, [r3, #4]
 80072b6:	6863      	ldr	r3, [r4, #4]
 80072b8:	bf08      	it	eq
 80072ba:	6031      	streq	r1, [r6, #0]
 80072bc:	5162      	str	r2, [r4, r5]
 80072be:	604b      	str	r3, [r1, #4]
 80072c0:	4638      	mov	r0, r7
 80072c2:	f104 060b 	add.w	r6, r4, #11
 80072c6:	f000 f8bf 	bl	8007448 <__malloc_unlock>
 80072ca:	f026 0607 	bic.w	r6, r6, #7
 80072ce:	1d23      	adds	r3, r4, #4
 80072d0:	1af2      	subs	r2, r6, r3
 80072d2:	d0b6      	beq.n	8007242 <_malloc_r+0x22>
 80072d4:	1b9b      	subs	r3, r3, r6
 80072d6:	50a3      	str	r3, [r4, r2]
 80072d8:	e7b3      	b.n	8007242 <_malloc_r+0x22>
 80072da:	6862      	ldr	r2, [r4, #4]
 80072dc:	42a3      	cmp	r3, r4
 80072de:	bf0c      	ite	eq
 80072e0:	6032      	streq	r2, [r6, #0]
 80072e2:	605a      	strne	r2, [r3, #4]
 80072e4:	e7ec      	b.n	80072c0 <_malloc_r+0xa0>
 80072e6:	4623      	mov	r3, r4
 80072e8:	6864      	ldr	r4, [r4, #4]
 80072ea:	e7b2      	b.n	8007252 <_malloc_r+0x32>
 80072ec:	4634      	mov	r4, r6
 80072ee:	6876      	ldr	r6, [r6, #4]
 80072f0:	e7b9      	b.n	8007266 <_malloc_r+0x46>
 80072f2:	230c      	movs	r3, #12
 80072f4:	603b      	str	r3, [r7, #0]
 80072f6:	4638      	mov	r0, r7
 80072f8:	f000 f8a6 	bl	8007448 <__malloc_unlock>
 80072fc:	e7a1      	b.n	8007242 <_malloc_r+0x22>
 80072fe:	6025      	str	r5, [r4, #0]
 8007300:	e7de      	b.n	80072c0 <_malloc_r+0xa0>
 8007302:	bf00      	nop
 8007304:	20004be8 	.word	0x20004be8

08007308 <cleanup_glue>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	460c      	mov	r4, r1
 800730c:	6809      	ldr	r1, [r1, #0]
 800730e:	4605      	mov	r5, r0
 8007310:	b109      	cbz	r1, 8007316 <cleanup_glue+0xe>
 8007312:	f7ff fff9 	bl	8007308 <cleanup_glue>
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800731e:	f000 b899 	b.w	8007454 <_free_r>
	...

08007324 <_reclaim_reent>:
 8007324:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <_reclaim_reent+0xb4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4283      	cmp	r3, r0
 800732a:	b570      	push	{r4, r5, r6, lr}
 800732c:	4604      	mov	r4, r0
 800732e:	d051      	beq.n	80073d4 <_reclaim_reent+0xb0>
 8007330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007332:	b143      	cbz	r3, 8007346 <_reclaim_reent+0x22>
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d14a      	bne.n	80073d0 <_reclaim_reent+0xac>
 800733a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	b111      	cbz	r1, 8007346 <_reclaim_reent+0x22>
 8007340:	4620      	mov	r0, r4
 8007342:	f000 f887 	bl	8007454 <_free_r>
 8007346:	6961      	ldr	r1, [r4, #20]
 8007348:	b111      	cbz	r1, 8007350 <_reclaim_reent+0x2c>
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f882 	bl	8007454 <_free_r>
 8007350:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007352:	b111      	cbz	r1, 800735a <_reclaim_reent+0x36>
 8007354:	4620      	mov	r0, r4
 8007356:	f000 f87d 	bl	8007454 <_free_r>
 800735a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800735c:	b111      	cbz	r1, 8007364 <_reclaim_reent+0x40>
 800735e:	4620      	mov	r0, r4
 8007360:	f000 f878 	bl	8007454 <_free_r>
 8007364:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007366:	b111      	cbz	r1, 800736e <_reclaim_reent+0x4a>
 8007368:	4620      	mov	r0, r4
 800736a:	f000 f873 	bl	8007454 <_free_r>
 800736e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007370:	b111      	cbz	r1, 8007378 <_reclaim_reent+0x54>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f86e 	bl	8007454 <_free_r>
 8007378:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800737a:	b111      	cbz	r1, 8007382 <_reclaim_reent+0x5e>
 800737c:	4620      	mov	r0, r4
 800737e:	f000 f869 	bl	8007454 <_free_r>
 8007382:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007384:	b111      	cbz	r1, 800738c <_reclaim_reent+0x68>
 8007386:	4620      	mov	r0, r4
 8007388:	f000 f864 	bl	8007454 <_free_r>
 800738c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738e:	b111      	cbz	r1, 8007396 <_reclaim_reent+0x72>
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f85f 	bl	8007454 <_free_r>
 8007396:	69a3      	ldr	r3, [r4, #24]
 8007398:	b1e3      	cbz	r3, 80073d4 <_reclaim_reent+0xb0>
 800739a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800739c:	4620      	mov	r0, r4
 800739e:	4798      	blx	r3
 80073a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073a2:	b1b9      	cbz	r1, 80073d4 <_reclaim_reent+0xb0>
 80073a4:	4620      	mov	r0, r4
 80073a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073aa:	f7ff bfad 	b.w	8007308 <cleanup_glue>
 80073ae:	5949      	ldr	r1, [r1, r5]
 80073b0:	b941      	cbnz	r1, 80073c4 <_reclaim_reent+0xa0>
 80073b2:	3504      	adds	r5, #4
 80073b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b6:	2d80      	cmp	r5, #128	; 0x80
 80073b8:	68d9      	ldr	r1, [r3, #12]
 80073ba:	d1f8      	bne.n	80073ae <_reclaim_reent+0x8a>
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 f849 	bl	8007454 <_free_r>
 80073c2:	e7ba      	b.n	800733a <_reclaim_reent+0x16>
 80073c4:	680e      	ldr	r6, [r1, #0]
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 f844 	bl	8007454 <_free_r>
 80073cc:	4631      	mov	r1, r6
 80073ce:	e7ef      	b.n	80073b0 <_reclaim_reent+0x8c>
 80073d0:	2500      	movs	r5, #0
 80073d2:	e7ef      	b.n	80073b4 <_reclaim_reent+0x90>
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	bf00      	nop
 80073d8:	20000010 	.word	0x20000010

080073dc <_sbrk_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d06      	ldr	r5, [pc, #24]	; (80073f8 <_sbrk_r+0x1c>)
 80073e0:	2300      	movs	r3, #0
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	f7fa f8ca 	bl	8001580 <_sbrk>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_sbrk_r+0x1a>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_sbrk_r+0x1a>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	20004bf0 	.word	0x20004bf0

080073fc <siprintf>:
 80073fc:	b40e      	push	{r1, r2, r3}
 80073fe:	b500      	push	{lr}
 8007400:	b09c      	sub	sp, #112	; 0x70
 8007402:	ab1d      	add	r3, sp, #116	; 0x74
 8007404:	9002      	str	r0, [sp, #8]
 8007406:	9006      	str	r0, [sp, #24]
 8007408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800740c:	4809      	ldr	r0, [pc, #36]	; (8007434 <siprintf+0x38>)
 800740e:	9107      	str	r1, [sp, #28]
 8007410:	9104      	str	r1, [sp, #16]
 8007412:	4909      	ldr	r1, [pc, #36]	; (8007438 <siprintf+0x3c>)
 8007414:	f853 2b04 	ldr.w	r2, [r3], #4
 8007418:	9105      	str	r1, [sp, #20]
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	a902      	add	r1, sp, #8
 8007420:	f000 f8c0 	bl	80075a4 <_svfiprintf_r>
 8007424:	9b02      	ldr	r3, [sp, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	b01c      	add	sp, #112	; 0x70
 800742c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007430:	b003      	add	sp, #12
 8007432:	4770      	bx	lr
 8007434:	20000010 	.word	0x20000010
 8007438:	ffff0208 	.word	0xffff0208

0800743c <__malloc_lock>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__malloc_lock+0x8>)
 800743e:	f7ff beb7 	b.w	80071b0 <__retarget_lock_acquire_recursive>
 8007442:	bf00      	nop
 8007444:	20004be4 	.word	0x20004be4

08007448 <__malloc_unlock>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__malloc_unlock+0x8>)
 800744a:	f7ff beb2 	b.w	80071b2 <__retarget_lock_release_recursive>
 800744e:	bf00      	nop
 8007450:	20004be4 	.word	0x20004be4

08007454 <_free_r>:
 8007454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007456:	2900      	cmp	r1, #0
 8007458:	d044      	beq.n	80074e4 <_free_r+0x90>
 800745a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800745e:	9001      	str	r0, [sp, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f1a1 0404 	sub.w	r4, r1, #4
 8007466:	bfb8      	it	lt
 8007468:	18e4      	addlt	r4, r4, r3
 800746a:	f7ff ffe7 	bl	800743c <__malloc_lock>
 800746e:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <_free_r+0x94>)
 8007470:	9801      	ldr	r0, [sp, #4]
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	b933      	cbnz	r3, 8007484 <_free_r+0x30>
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	6014      	str	r4, [r2, #0]
 800747a:	b003      	add	sp, #12
 800747c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007480:	f7ff bfe2 	b.w	8007448 <__malloc_unlock>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d908      	bls.n	800749a <_free_r+0x46>
 8007488:	6825      	ldr	r5, [r4, #0]
 800748a:	1961      	adds	r1, r4, r5
 800748c:	428b      	cmp	r3, r1
 800748e:	bf01      	itttt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	1949      	addeq	r1, r1, r5
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	e7ed      	b.n	8007476 <_free_r+0x22>
 800749a:	461a      	mov	r2, r3
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b10b      	cbz	r3, 80074a4 <_free_r+0x50>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d9fa      	bls.n	800749a <_free_r+0x46>
 80074a4:	6811      	ldr	r1, [r2, #0]
 80074a6:	1855      	adds	r5, r2, r1
 80074a8:	42a5      	cmp	r5, r4
 80074aa:	d10b      	bne.n	80074c4 <_free_r+0x70>
 80074ac:	6824      	ldr	r4, [r4, #0]
 80074ae:	4421      	add	r1, r4
 80074b0:	1854      	adds	r4, r2, r1
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	d1e0      	bne.n	800747a <_free_r+0x26>
 80074b8:	681c      	ldr	r4, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	6053      	str	r3, [r2, #4]
 80074be:	4421      	add	r1, r4
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	e7da      	b.n	800747a <_free_r+0x26>
 80074c4:	d902      	bls.n	80074cc <_free_r+0x78>
 80074c6:	230c      	movs	r3, #12
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e7d6      	b.n	800747a <_free_r+0x26>
 80074cc:	6825      	ldr	r5, [r4, #0]
 80074ce:	1961      	adds	r1, r4, r5
 80074d0:	428b      	cmp	r3, r1
 80074d2:	bf04      	itt	eq
 80074d4:	6819      	ldreq	r1, [r3, #0]
 80074d6:	685b      	ldreq	r3, [r3, #4]
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	bf04      	itt	eq
 80074dc:	1949      	addeq	r1, r1, r5
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	6054      	str	r4, [r2, #4]
 80074e2:	e7ca      	b.n	800747a <_free_r+0x26>
 80074e4:	b003      	add	sp, #12
 80074e6:	bd30      	pop	{r4, r5, pc}
 80074e8:	20004be8 	.word	0x20004be8

080074ec <__ssputs_r>:
 80074ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	688e      	ldr	r6, [r1, #8]
 80074f2:	429e      	cmp	r6, r3
 80074f4:	4682      	mov	sl, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	4690      	mov	r8, r2
 80074fa:	461f      	mov	r7, r3
 80074fc:	d838      	bhi.n	8007570 <__ssputs_r+0x84>
 80074fe:	898a      	ldrh	r2, [r1, #12]
 8007500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007504:	d032      	beq.n	800756c <__ssputs_r+0x80>
 8007506:	6825      	ldr	r5, [r4, #0]
 8007508:	6909      	ldr	r1, [r1, #16]
 800750a:	eba5 0901 	sub.w	r9, r5, r1
 800750e:	6965      	ldr	r5, [r4, #20]
 8007510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007518:	3301      	adds	r3, #1
 800751a:	444b      	add	r3, r9
 800751c:	106d      	asrs	r5, r5, #1
 800751e:	429d      	cmp	r5, r3
 8007520:	bf38      	it	cc
 8007522:	461d      	movcc	r5, r3
 8007524:	0553      	lsls	r3, r2, #21
 8007526:	d531      	bpl.n	800758c <__ssputs_r+0xa0>
 8007528:	4629      	mov	r1, r5
 800752a:	f7ff fe79 	bl	8007220 <_malloc_r>
 800752e:	4606      	mov	r6, r0
 8007530:	b950      	cbnz	r0, 8007548 <__ssputs_r+0x5c>
 8007532:	230c      	movs	r3, #12
 8007534:	f8ca 3000 	str.w	r3, [sl]
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	6921      	ldr	r1, [r4, #16]
 800754a:	464a      	mov	r2, r9
 800754c:	f7ff fe32 	bl	80071b4 <memcpy>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	6126      	str	r6, [r4, #16]
 800755e:	6165      	str	r5, [r4, #20]
 8007560:	444e      	add	r6, r9
 8007562:	eba5 0509 	sub.w	r5, r5, r9
 8007566:	6026      	str	r6, [r4, #0]
 8007568:	60a5      	str	r5, [r4, #8]
 800756a:	463e      	mov	r6, r7
 800756c:	42be      	cmp	r6, r7
 800756e:	d900      	bls.n	8007572 <__ssputs_r+0x86>
 8007570:	463e      	mov	r6, r7
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	4632      	mov	r2, r6
 8007576:	4641      	mov	r1, r8
 8007578:	f000 faa8 	bl	8007acc <memmove>
 800757c:	68a3      	ldr	r3, [r4, #8]
 800757e:	1b9b      	subs	r3, r3, r6
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	4433      	add	r3, r6
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	2000      	movs	r0, #0
 800758a:	e7db      	b.n	8007544 <__ssputs_r+0x58>
 800758c:	462a      	mov	r2, r5
 800758e:	f000 fab7 	bl	8007b00 <_realloc_r>
 8007592:	4606      	mov	r6, r0
 8007594:	2800      	cmp	r0, #0
 8007596:	d1e1      	bne.n	800755c <__ssputs_r+0x70>
 8007598:	6921      	ldr	r1, [r4, #16]
 800759a:	4650      	mov	r0, sl
 800759c:	f7ff ff5a 	bl	8007454 <_free_r>
 80075a0:	e7c7      	b.n	8007532 <__ssputs_r+0x46>
	...

080075a4 <_svfiprintf_r>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	4698      	mov	r8, r3
 80075aa:	898b      	ldrh	r3, [r1, #12]
 80075ac:	061b      	lsls	r3, r3, #24
 80075ae:	b09d      	sub	sp, #116	; 0x74
 80075b0:	4607      	mov	r7, r0
 80075b2:	460d      	mov	r5, r1
 80075b4:	4614      	mov	r4, r2
 80075b6:	d50e      	bpl.n	80075d6 <_svfiprintf_r+0x32>
 80075b8:	690b      	ldr	r3, [r1, #16]
 80075ba:	b963      	cbnz	r3, 80075d6 <_svfiprintf_r+0x32>
 80075bc:	2140      	movs	r1, #64	; 0x40
 80075be:	f7ff fe2f 	bl	8007220 <_malloc_r>
 80075c2:	6028      	str	r0, [r5, #0]
 80075c4:	6128      	str	r0, [r5, #16]
 80075c6:	b920      	cbnz	r0, 80075d2 <_svfiprintf_r+0x2e>
 80075c8:	230c      	movs	r3, #12
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e0d1      	b.n	8007776 <_svfiprintf_r+0x1d2>
 80075d2:	2340      	movs	r3, #64	; 0x40
 80075d4:	616b      	str	r3, [r5, #20]
 80075d6:	2300      	movs	r3, #0
 80075d8:	9309      	str	r3, [sp, #36]	; 0x24
 80075da:	2320      	movs	r3, #32
 80075dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e4:	2330      	movs	r3, #48	; 0x30
 80075e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007790 <_svfiprintf_r+0x1ec>
 80075ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ee:	f04f 0901 	mov.w	r9, #1
 80075f2:	4623      	mov	r3, r4
 80075f4:	469a      	mov	sl, r3
 80075f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075fa:	b10a      	cbz	r2, 8007600 <_svfiprintf_r+0x5c>
 80075fc:	2a25      	cmp	r2, #37	; 0x25
 80075fe:	d1f9      	bne.n	80075f4 <_svfiprintf_r+0x50>
 8007600:	ebba 0b04 	subs.w	fp, sl, r4
 8007604:	d00b      	beq.n	800761e <_svfiprintf_r+0x7a>
 8007606:	465b      	mov	r3, fp
 8007608:	4622      	mov	r2, r4
 800760a:	4629      	mov	r1, r5
 800760c:	4638      	mov	r0, r7
 800760e:	f7ff ff6d 	bl	80074ec <__ssputs_r>
 8007612:	3001      	adds	r0, #1
 8007614:	f000 80aa 	beq.w	800776c <_svfiprintf_r+0x1c8>
 8007618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800761a:	445a      	add	r2, fp
 800761c:	9209      	str	r2, [sp, #36]	; 0x24
 800761e:	f89a 3000 	ldrb.w	r3, [sl]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 80a2 	beq.w	800776c <_svfiprintf_r+0x1c8>
 8007628:	2300      	movs	r3, #0
 800762a:	f04f 32ff 	mov.w	r2, #4294967295
 800762e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007632:	f10a 0a01 	add.w	sl, sl, #1
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800763e:	931a      	str	r3, [sp, #104]	; 0x68
 8007640:	4654      	mov	r4, sl
 8007642:	2205      	movs	r2, #5
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	4851      	ldr	r0, [pc, #324]	; (8007790 <_svfiprintf_r+0x1ec>)
 800764a:	f7f8 fdd1 	bl	80001f0 <memchr>
 800764e:	9a04      	ldr	r2, [sp, #16]
 8007650:	b9d8      	cbnz	r0, 800768a <_svfiprintf_r+0xe6>
 8007652:	06d0      	lsls	r0, r2, #27
 8007654:	bf44      	itt	mi
 8007656:	2320      	movmi	r3, #32
 8007658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765c:	0711      	lsls	r1, r2, #28
 800765e:	bf44      	itt	mi
 8007660:	232b      	movmi	r3, #43	; 0x2b
 8007662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007666:	f89a 3000 	ldrb.w	r3, [sl]
 800766a:	2b2a      	cmp	r3, #42	; 0x2a
 800766c:	d015      	beq.n	800769a <_svfiprintf_r+0xf6>
 800766e:	9a07      	ldr	r2, [sp, #28]
 8007670:	4654      	mov	r4, sl
 8007672:	2000      	movs	r0, #0
 8007674:	f04f 0c0a 	mov.w	ip, #10
 8007678:	4621      	mov	r1, r4
 800767a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800767e:	3b30      	subs	r3, #48	; 0x30
 8007680:	2b09      	cmp	r3, #9
 8007682:	d94e      	bls.n	8007722 <_svfiprintf_r+0x17e>
 8007684:	b1b0      	cbz	r0, 80076b4 <_svfiprintf_r+0x110>
 8007686:	9207      	str	r2, [sp, #28]
 8007688:	e014      	b.n	80076b4 <_svfiprintf_r+0x110>
 800768a:	eba0 0308 	sub.w	r3, r0, r8
 800768e:	fa09 f303 	lsl.w	r3, r9, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	46a2      	mov	sl, r4
 8007698:	e7d2      	b.n	8007640 <_svfiprintf_r+0x9c>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	1d19      	adds	r1, r3, #4
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	9103      	str	r1, [sp, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfbb      	ittet	lt
 80076a6:	425b      	neglt	r3, r3
 80076a8:	f042 0202 	orrlt.w	r2, r2, #2
 80076ac:	9307      	strge	r3, [sp, #28]
 80076ae:	9307      	strlt	r3, [sp, #28]
 80076b0:	bfb8      	it	lt
 80076b2:	9204      	strlt	r2, [sp, #16]
 80076b4:	7823      	ldrb	r3, [r4, #0]
 80076b6:	2b2e      	cmp	r3, #46	; 0x2e
 80076b8:	d10c      	bne.n	80076d4 <_svfiprintf_r+0x130>
 80076ba:	7863      	ldrb	r3, [r4, #1]
 80076bc:	2b2a      	cmp	r3, #42	; 0x2a
 80076be:	d135      	bne.n	800772c <_svfiprintf_r+0x188>
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	9203      	str	r2, [sp, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfb8      	it	lt
 80076cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d0:	3402      	adds	r4, #2
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077a0 <_svfiprintf_r+0x1fc>
 80076d8:	7821      	ldrb	r1, [r4, #0]
 80076da:	2203      	movs	r2, #3
 80076dc:	4650      	mov	r0, sl
 80076de:	f7f8 fd87 	bl	80001f0 <memchr>
 80076e2:	b140      	cbz	r0, 80076f6 <_svfiprintf_r+0x152>
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	eba0 000a 	sub.w	r0, r0, sl
 80076ea:	fa03 f000 	lsl.w	r0, r3, r0
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	4303      	orrs	r3, r0
 80076f2:	3401      	adds	r4, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fa:	4826      	ldr	r0, [pc, #152]	; (8007794 <_svfiprintf_r+0x1f0>)
 80076fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007700:	2206      	movs	r2, #6
 8007702:	f7f8 fd75 	bl	80001f0 <memchr>
 8007706:	2800      	cmp	r0, #0
 8007708:	d038      	beq.n	800777c <_svfiprintf_r+0x1d8>
 800770a:	4b23      	ldr	r3, [pc, #140]	; (8007798 <_svfiprintf_r+0x1f4>)
 800770c:	bb1b      	cbnz	r3, 8007756 <_svfiprintf_r+0x1b2>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	3307      	adds	r3, #7
 8007712:	f023 0307 	bic.w	r3, r3, #7
 8007716:	3308      	adds	r3, #8
 8007718:	9303      	str	r3, [sp, #12]
 800771a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771c:	4433      	add	r3, r6
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	e767      	b.n	80075f2 <_svfiprintf_r+0x4e>
 8007722:	fb0c 3202 	mla	r2, ip, r2, r3
 8007726:	460c      	mov	r4, r1
 8007728:	2001      	movs	r0, #1
 800772a:	e7a5      	b.n	8007678 <_svfiprintf_r+0xd4>
 800772c:	2300      	movs	r3, #0
 800772e:	3401      	adds	r4, #1
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	4619      	mov	r1, r3
 8007734:	f04f 0c0a 	mov.w	ip, #10
 8007738:	4620      	mov	r0, r4
 800773a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773e:	3a30      	subs	r2, #48	; 0x30
 8007740:	2a09      	cmp	r2, #9
 8007742:	d903      	bls.n	800774c <_svfiprintf_r+0x1a8>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0c5      	beq.n	80076d4 <_svfiprintf_r+0x130>
 8007748:	9105      	str	r1, [sp, #20]
 800774a:	e7c3      	b.n	80076d4 <_svfiprintf_r+0x130>
 800774c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007750:	4604      	mov	r4, r0
 8007752:	2301      	movs	r3, #1
 8007754:	e7f0      	b.n	8007738 <_svfiprintf_r+0x194>
 8007756:	ab03      	add	r3, sp, #12
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462a      	mov	r2, r5
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <_svfiprintf_r+0x1f8>)
 800775e:	a904      	add	r1, sp, #16
 8007760:	4638      	mov	r0, r7
 8007762:	f3af 8000 	nop.w
 8007766:	1c42      	adds	r2, r0, #1
 8007768:	4606      	mov	r6, r0
 800776a:	d1d6      	bne.n	800771a <_svfiprintf_r+0x176>
 800776c:	89ab      	ldrh	r3, [r5, #12]
 800776e:	065b      	lsls	r3, r3, #25
 8007770:	f53f af2c 	bmi.w	80075cc <_svfiprintf_r+0x28>
 8007774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007776:	b01d      	add	sp, #116	; 0x74
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	ab03      	add	r3, sp, #12
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	462a      	mov	r2, r5
 8007782:	4b06      	ldr	r3, [pc, #24]	; (800779c <_svfiprintf_r+0x1f8>)
 8007784:	a904      	add	r1, sp, #16
 8007786:	4638      	mov	r0, r7
 8007788:	f000 f87a 	bl	8007880 <_printf_i>
 800778c:	e7eb      	b.n	8007766 <_svfiprintf_r+0x1c2>
 800778e:	bf00      	nop
 8007790:	08007c94 	.word	0x08007c94
 8007794:	08007c9e 	.word	0x08007c9e
 8007798:	00000000 	.word	0x00000000
 800779c:	080074ed 	.word	0x080074ed
 80077a0:	08007c9a 	.word	0x08007c9a

080077a4 <_printf_common>:
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a8:	4616      	mov	r6, r2
 80077aa:	4699      	mov	r9, r3
 80077ac:	688a      	ldr	r2, [r1, #8]
 80077ae:	690b      	ldr	r3, [r1, #16]
 80077b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077b4:	4293      	cmp	r3, r2
 80077b6:	bfb8      	it	lt
 80077b8:	4613      	movlt	r3, r2
 80077ba:	6033      	str	r3, [r6, #0]
 80077bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077c0:	4607      	mov	r7, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	b10a      	cbz	r2, 80077ca <_printf_common+0x26>
 80077c6:	3301      	adds	r3, #1
 80077c8:	6033      	str	r3, [r6, #0]
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	0699      	lsls	r1, r3, #26
 80077ce:	bf42      	ittt	mi
 80077d0:	6833      	ldrmi	r3, [r6, #0]
 80077d2:	3302      	addmi	r3, #2
 80077d4:	6033      	strmi	r3, [r6, #0]
 80077d6:	6825      	ldr	r5, [r4, #0]
 80077d8:	f015 0506 	ands.w	r5, r5, #6
 80077dc:	d106      	bne.n	80077ec <_printf_common+0x48>
 80077de:	f104 0a19 	add.w	sl, r4, #25
 80077e2:	68e3      	ldr	r3, [r4, #12]
 80077e4:	6832      	ldr	r2, [r6, #0]
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	42ab      	cmp	r3, r5
 80077ea:	dc26      	bgt.n	800783a <_printf_common+0x96>
 80077ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077f0:	1e13      	subs	r3, r2, #0
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	bf18      	it	ne
 80077f6:	2301      	movne	r3, #1
 80077f8:	0692      	lsls	r2, r2, #26
 80077fa:	d42b      	bmi.n	8007854 <_printf_common+0xb0>
 80077fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007800:	4649      	mov	r1, r9
 8007802:	4638      	mov	r0, r7
 8007804:	47c0      	blx	r8
 8007806:	3001      	adds	r0, #1
 8007808:	d01e      	beq.n	8007848 <_printf_common+0xa4>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	68e5      	ldr	r5, [r4, #12]
 800780e:	6832      	ldr	r2, [r6, #0]
 8007810:	f003 0306 	and.w	r3, r3, #6
 8007814:	2b04      	cmp	r3, #4
 8007816:	bf08      	it	eq
 8007818:	1aad      	subeq	r5, r5, r2
 800781a:	68a3      	ldr	r3, [r4, #8]
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	bf0c      	ite	eq
 8007820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007824:	2500      	movne	r5, #0
 8007826:	4293      	cmp	r3, r2
 8007828:	bfc4      	itt	gt
 800782a:	1a9b      	subgt	r3, r3, r2
 800782c:	18ed      	addgt	r5, r5, r3
 800782e:	2600      	movs	r6, #0
 8007830:	341a      	adds	r4, #26
 8007832:	42b5      	cmp	r5, r6
 8007834:	d11a      	bne.n	800786c <_printf_common+0xc8>
 8007836:	2000      	movs	r0, #0
 8007838:	e008      	b.n	800784c <_printf_common+0xa8>
 800783a:	2301      	movs	r3, #1
 800783c:	4652      	mov	r2, sl
 800783e:	4649      	mov	r1, r9
 8007840:	4638      	mov	r0, r7
 8007842:	47c0      	blx	r8
 8007844:	3001      	adds	r0, #1
 8007846:	d103      	bne.n	8007850 <_printf_common+0xac>
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007850:	3501      	adds	r5, #1
 8007852:	e7c6      	b.n	80077e2 <_printf_common+0x3e>
 8007854:	18e1      	adds	r1, r4, r3
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	2030      	movs	r0, #48	; 0x30
 800785a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800785e:	4422      	add	r2, r4
 8007860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007868:	3302      	adds	r3, #2
 800786a:	e7c7      	b.n	80077fc <_printf_common+0x58>
 800786c:	2301      	movs	r3, #1
 800786e:	4622      	mov	r2, r4
 8007870:	4649      	mov	r1, r9
 8007872:	4638      	mov	r0, r7
 8007874:	47c0      	blx	r8
 8007876:	3001      	adds	r0, #1
 8007878:	d0e6      	beq.n	8007848 <_printf_common+0xa4>
 800787a:	3601      	adds	r6, #1
 800787c:	e7d9      	b.n	8007832 <_printf_common+0x8e>
	...

08007880 <_printf_i>:
 8007880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	7e0f      	ldrb	r7, [r1, #24]
 8007886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007888:	2f78      	cmp	r7, #120	; 0x78
 800788a:	4691      	mov	r9, r2
 800788c:	4680      	mov	r8, r0
 800788e:	460c      	mov	r4, r1
 8007890:	469a      	mov	sl, r3
 8007892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007896:	d807      	bhi.n	80078a8 <_printf_i+0x28>
 8007898:	2f62      	cmp	r7, #98	; 0x62
 800789a:	d80a      	bhi.n	80078b2 <_printf_i+0x32>
 800789c:	2f00      	cmp	r7, #0
 800789e:	f000 80d8 	beq.w	8007a52 <_printf_i+0x1d2>
 80078a2:	2f58      	cmp	r7, #88	; 0x58
 80078a4:	f000 80a3 	beq.w	80079ee <_printf_i+0x16e>
 80078a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078b0:	e03a      	b.n	8007928 <_printf_i+0xa8>
 80078b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078b6:	2b15      	cmp	r3, #21
 80078b8:	d8f6      	bhi.n	80078a8 <_printf_i+0x28>
 80078ba:	a101      	add	r1, pc, #4	; (adr r1, 80078c0 <_printf_i+0x40>)
 80078bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078c0:	08007919 	.word	0x08007919
 80078c4:	0800792d 	.word	0x0800792d
 80078c8:	080078a9 	.word	0x080078a9
 80078cc:	080078a9 	.word	0x080078a9
 80078d0:	080078a9 	.word	0x080078a9
 80078d4:	080078a9 	.word	0x080078a9
 80078d8:	0800792d 	.word	0x0800792d
 80078dc:	080078a9 	.word	0x080078a9
 80078e0:	080078a9 	.word	0x080078a9
 80078e4:	080078a9 	.word	0x080078a9
 80078e8:	080078a9 	.word	0x080078a9
 80078ec:	08007a39 	.word	0x08007a39
 80078f0:	0800795d 	.word	0x0800795d
 80078f4:	08007a1b 	.word	0x08007a1b
 80078f8:	080078a9 	.word	0x080078a9
 80078fc:	080078a9 	.word	0x080078a9
 8007900:	08007a5b 	.word	0x08007a5b
 8007904:	080078a9 	.word	0x080078a9
 8007908:	0800795d 	.word	0x0800795d
 800790c:	080078a9 	.word	0x080078a9
 8007910:	080078a9 	.word	0x080078a9
 8007914:	08007a23 	.word	0x08007a23
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	1d1a      	adds	r2, r3, #4
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	602a      	str	r2, [r5, #0]
 8007920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007928:	2301      	movs	r3, #1
 800792a:	e0a3      	b.n	8007a74 <_printf_i+0x1f4>
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	6829      	ldr	r1, [r5, #0]
 8007930:	0606      	lsls	r6, r0, #24
 8007932:	f101 0304 	add.w	r3, r1, #4
 8007936:	d50a      	bpl.n	800794e <_printf_i+0xce>
 8007938:	680e      	ldr	r6, [r1, #0]
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	2e00      	cmp	r6, #0
 800793e:	da03      	bge.n	8007948 <_printf_i+0xc8>
 8007940:	232d      	movs	r3, #45	; 0x2d
 8007942:	4276      	negs	r6, r6
 8007944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007948:	485e      	ldr	r0, [pc, #376]	; (8007ac4 <_printf_i+0x244>)
 800794a:	230a      	movs	r3, #10
 800794c:	e019      	b.n	8007982 <_printf_i+0x102>
 800794e:	680e      	ldr	r6, [r1, #0]
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007956:	bf18      	it	ne
 8007958:	b236      	sxthne	r6, r6
 800795a:	e7ef      	b.n	800793c <_printf_i+0xbc>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	6820      	ldr	r0, [r4, #0]
 8007960:	1d19      	adds	r1, r3, #4
 8007962:	6029      	str	r1, [r5, #0]
 8007964:	0601      	lsls	r1, r0, #24
 8007966:	d501      	bpl.n	800796c <_printf_i+0xec>
 8007968:	681e      	ldr	r6, [r3, #0]
 800796a:	e002      	b.n	8007972 <_printf_i+0xf2>
 800796c:	0646      	lsls	r6, r0, #25
 800796e:	d5fb      	bpl.n	8007968 <_printf_i+0xe8>
 8007970:	881e      	ldrh	r6, [r3, #0]
 8007972:	4854      	ldr	r0, [pc, #336]	; (8007ac4 <_printf_i+0x244>)
 8007974:	2f6f      	cmp	r7, #111	; 0x6f
 8007976:	bf0c      	ite	eq
 8007978:	2308      	moveq	r3, #8
 800797a:	230a      	movne	r3, #10
 800797c:	2100      	movs	r1, #0
 800797e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007982:	6865      	ldr	r5, [r4, #4]
 8007984:	60a5      	str	r5, [r4, #8]
 8007986:	2d00      	cmp	r5, #0
 8007988:	bfa2      	ittt	ge
 800798a:	6821      	ldrge	r1, [r4, #0]
 800798c:	f021 0104 	bicge.w	r1, r1, #4
 8007990:	6021      	strge	r1, [r4, #0]
 8007992:	b90e      	cbnz	r6, 8007998 <_printf_i+0x118>
 8007994:	2d00      	cmp	r5, #0
 8007996:	d04d      	beq.n	8007a34 <_printf_i+0x1b4>
 8007998:	4615      	mov	r5, r2
 800799a:	fbb6 f1f3 	udiv	r1, r6, r3
 800799e:	fb03 6711 	mls	r7, r3, r1, r6
 80079a2:	5dc7      	ldrb	r7, [r0, r7]
 80079a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079a8:	4637      	mov	r7, r6
 80079aa:	42bb      	cmp	r3, r7
 80079ac:	460e      	mov	r6, r1
 80079ae:	d9f4      	bls.n	800799a <_printf_i+0x11a>
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d10b      	bne.n	80079cc <_printf_i+0x14c>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	07de      	lsls	r6, r3, #31
 80079b8:	d508      	bpl.n	80079cc <_printf_i+0x14c>
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	6861      	ldr	r1, [r4, #4]
 80079be:	4299      	cmp	r1, r3
 80079c0:	bfde      	ittt	le
 80079c2:	2330      	movle	r3, #48	; 0x30
 80079c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079cc:	1b52      	subs	r2, r2, r5
 80079ce:	6122      	str	r2, [r4, #16]
 80079d0:	f8cd a000 	str.w	sl, [sp]
 80079d4:	464b      	mov	r3, r9
 80079d6:	aa03      	add	r2, sp, #12
 80079d8:	4621      	mov	r1, r4
 80079da:	4640      	mov	r0, r8
 80079dc:	f7ff fee2 	bl	80077a4 <_printf_common>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d14c      	bne.n	8007a7e <_printf_i+0x1fe>
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	b004      	add	sp, #16
 80079ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ee:	4835      	ldr	r0, [pc, #212]	; (8007ac4 <_printf_i+0x244>)
 80079f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079f4:	6829      	ldr	r1, [r5, #0]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079fc:	6029      	str	r1, [r5, #0]
 80079fe:	061d      	lsls	r5, r3, #24
 8007a00:	d514      	bpl.n	8007a2c <_printf_i+0x1ac>
 8007a02:	07df      	lsls	r7, r3, #31
 8007a04:	bf44      	itt	mi
 8007a06:	f043 0320 	orrmi.w	r3, r3, #32
 8007a0a:	6023      	strmi	r3, [r4, #0]
 8007a0c:	b91e      	cbnz	r6, 8007a16 <_printf_i+0x196>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f023 0320 	bic.w	r3, r3, #32
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	2310      	movs	r3, #16
 8007a18:	e7b0      	b.n	800797c <_printf_i+0xfc>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	f043 0320 	orr.w	r3, r3, #32
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	2378      	movs	r3, #120	; 0x78
 8007a24:	4828      	ldr	r0, [pc, #160]	; (8007ac8 <_printf_i+0x248>)
 8007a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a2a:	e7e3      	b.n	80079f4 <_printf_i+0x174>
 8007a2c:	0659      	lsls	r1, r3, #25
 8007a2e:	bf48      	it	mi
 8007a30:	b2b6      	uxthmi	r6, r6
 8007a32:	e7e6      	b.n	8007a02 <_printf_i+0x182>
 8007a34:	4615      	mov	r5, r2
 8007a36:	e7bb      	b.n	80079b0 <_printf_i+0x130>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	6826      	ldr	r6, [r4, #0]
 8007a3c:	6961      	ldr	r1, [r4, #20]
 8007a3e:	1d18      	adds	r0, r3, #4
 8007a40:	6028      	str	r0, [r5, #0]
 8007a42:	0635      	lsls	r5, r6, #24
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	d501      	bpl.n	8007a4c <_printf_i+0x1cc>
 8007a48:	6019      	str	r1, [r3, #0]
 8007a4a:	e002      	b.n	8007a52 <_printf_i+0x1d2>
 8007a4c:	0670      	lsls	r0, r6, #25
 8007a4e:	d5fb      	bpl.n	8007a48 <_printf_i+0x1c8>
 8007a50:	8019      	strh	r1, [r3, #0]
 8007a52:	2300      	movs	r3, #0
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	4615      	mov	r5, r2
 8007a58:	e7ba      	b.n	80079d0 <_printf_i+0x150>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	1d1a      	adds	r2, r3, #4
 8007a5e:	602a      	str	r2, [r5, #0]
 8007a60:	681d      	ldr	r5, [r3, #0]
 8007a62:	6862      	ldr	r2, [r4, #4]
 8007a64:	2100      	movs	r1, #0
 8007a66:	4628      	mov	r0, r5
 8007a68:	f7f8 fbc2 	bl	80001f0 <memchr>
 8007a6c:	b108      	cbz	r0, 8007a72 <_printf_i+0x1f2>
 8007a6e:	1b40      	subs	r0, r0, r5
 8007a70:	6060      	str	r0, [r4, #4]
 8007a72:	6863      	ldr	r3, [r4, #4]
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	2300      	movs	r3, #0
 8007a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a7c:	e7a8      	b.n	80079d0 <_printf_i+0x150>
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	462a      	mov	r2, r5
 8007a82:	4649      	mov	r1, r9
 8007a84:	4640      	mov	r0, r8
 8007a86:	47d0      	blx	sl
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d0ab      	beq.n	80079e4 <_printf_i+0x164>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	079b      	lsls	r3, r3, #30
 8007a90:	d413      	bmi.n	8007aba <_printf_i+0x23a>
 8007a92:	68e0      	ldr	r0, [r4, #12]
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	4298      	cmp	r0, r3
 8007a98:	bfb8      	it	lt
 8007a9a:	4618      	movlt	r0, r3
 8007a9c:	e7a4      	b.n	80079e8 <_printf_i+0x168>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4632      	mov	r2, r6
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	47d0      	blx	sl
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d09b      	beq.n	80079e4 <_printf_i+0x164>
 8007aac:	3501      	adds	r5, #1
 8007aae:	68e3      	ldr	r3, [r4, #12]
 8007ab0:	9903      	ldr	r1, [sp, #12]
 8007ab2:	1a5b      	subs	r3, r3, r1
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	dcf2      	bgt.n	8007a9e <_printf_i+0x21e>
 8007ab8:	e7eb      	b.n	8007a92 <_printf_i+0x212>
 8007aba:	2500      	movs	r5, #0
 8007abc:	f104 0619 	add.w	r6, r4, #25
 8007ac0:	e7f5      	b.n	8007aae <_printf_i+0x22e>
 8007ac2:	bf00      	nop
 8007ac4:	08007ca5 	.word	0x08007ca5
 8007ac8:	08007cb6 	.word	0x08007cb6

08007acc <memmove>:
 8007acc:	4288      	cmp	r0, r1
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	eb01 0402 	add.w	r4, r1, r2
 8007ad4:	d902      	bls.n	8007adc <memmove+0x10>
 8007ad6:	4284      	cmp	r4, r0
 8007ad8:	4623      	mov	r3, r4
 8007ada:	d807      	bhi.n	8007aec <memmove+0x20>
 8007adc:	1e43      	subs	r3, r0, #1
 8007ade:	42a1      	cmp	r1, r4
 8007ae0:	d008      	beq.n	8007af4 <memmove+0x28>
 8007ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aea:	e7f8      	b.n	8007ade <memmove+0x12>
 8007aec:	4402      	add	r2, r0
 8007aee:	4601      	mov	r1, r0
 8007af0:	428a      	cmp	r2, r1
 8007af2:	d100      	bne.n	8007af6 <memmove+0x2a>
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007afe:	e7f7      	b.n	8007af0 <memmove+0x24>

08007b00 <_realloc_r>:
 8007b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b04:	4680      	mov	r8, r0
 8007b06:	4614      	mov	r4, r2
 8007b08:	460e      	mov	r6, r1
 8007b0a:	b921      	cbnz	r1, 8007b16 <_realloc_r+0x16>
 8007b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	4611      	mov	r1, r2
 8007b12:	f7ff bb85 	b.w	8007220 <_malloc_r>
 8007b16:	b92a      	cbnz	r2, 8007b24 <_realloc_r+0x24>
 8007b18:	f7ff fc9c 	bl	8007454 <_free_r>
 8007b1c:	4625      	mov	r5, r4
 8007b1e:	4628      	mov	r0, r5
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b24:	f000 f81b 	bl	8007b5e <_malloc_usable_size_r>
 8007b28:	4284      	cmp	r4, r0
 8007b2a:	4607      	mov	r7, r0
 8007b2c:	d802      	bhi.n	8007b34 <_realloc_r+0x34>
 8007b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b32:	d812      	bhi.n	8007b5a <_realloc_r+0x5a>
 8007b34:	4621      	mov	r1, r4
 8007b36:	4640      	mov	r0, r8
 8007b38:	f7ff fb72 	bl	8007220 <_malloc_r>
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d0ed      	beq.n	8007b1e <_realloc_r+0x1e>
 8007b42:	42bc      	cmp	r4, r7
 8007b44:	4622      	mov	r2, r4
 8007b46:	4631      	mov	r1, r6
 8007b48:	bf28      	it	cs
 8007b4a:	463a      	movcs	r2, r7
 8007b4c:	f7ff fb32 	bl	80071b4 <memcpy>
 8007b50:	4631      	mov	r1, r6
 8007b52:	4640      	mov	r0, r8
 8007b54:	f7ff fc7e 	bl	8007454 <_free_r>
 8007b58:	e7e1      	b.n	8007b1e <_realloc_r+0x1e>
 8007b5a:	4635      	mov	r5, r6
 8007b5c:	e7df      	b.n	8007b1e <_realloc_r+0x1e>

08007b5e <_malloc_usable_size_r>:
 8007b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b62:	1f18      	subs	r0, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfbc      	itt	lt
 8007b68:	580b      	ldrlt	r3, [r1, r0]
 8007b6a:	18c0      	addlt	r0, r0, r3
 8007b6c:	4770      	bx	lr
	...

08007b70 <_init>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr

08007b7c <_fini>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr
